{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { appointmentAPI } from '../services/api';\nexport const useAppointments = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n\n  // Mock data for development\n  const mockAppointments = [{\n    id: 1,\n    scheduledDate: '2025-01-15',\n    scheduledTime: '10:00:00',\n    duration: 60,\n    treatmentType: 'abhyanga',\n    status: 'confirmed',\n    practitioner: {\n      id: 1,\n      fullName: 'Priya Sharma'\n    },\n    location: 'Room 101',\n    notes: 'Please arrive 15 minutes early for preparation',\n    isVirtual: false,\n    preparationInstructions: ['Avoid heavy meals 2 hours before treatment', 'Wear comfortable, loose clothing', 'Bring a change of clothes']\n  }, {\n    id: 2,\n    scheduledDate: '2025-01-17',\n    scheduledTime: '14:30:00',\n    duration: 90,\n    treatmentType: 'shirodhara',\n    status: 'confirmed',\n    practitioner: {\n      id: 2,\n      fullName: 'Rajesh Kumar'\n    },\n    location: 'Room 203',\n    notes: 'Stress relief session',\n    isVirtual: false,\n    preparationInstructions: ['Avoid caffeine 4 hours before treatment', 'Come with clean, dry hair', 'Remove all jewelry and accessories']\n  }, {\n    id: 3,\n    scheduledDate: '2025-01-20',\n    scheduledTime: '09:00:00',\n    duration: 45,\n    treatmentType: 'consultation',\n    status: 'pending',\n    practitioner: {\n      id: 1,\n      fullName: 'Priya Sharma'\n    },\n    location: 'Virtual',\n    notes: 'Progress review and treatment plan adjustment',\n    isVirtual: true,\n    preparationInstructions: ['Prepare list of any concerns or questions', 'Have your treatment journal ready', 'Ensure stable internet connection']\n  }];\n  const fetchAppointments = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // In production, this would be an actual API call\n      // const response = await api.get('/appointments');\n      // setAppointments(response.data);\n\n      // For now, use mock data\n      setTimeout(() => {\n        setAppointments(mockAppointments);\n        setLoading(false);\n      }, 1000);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch appointments');\n      setLoading(false);\n    }\n  };\n  const bookAppointment = async appointmentData => {\n    try {\n      var _user$id, _user$id$toString, _appointmentData$prac, _appointmentData$prac2;\n      setLoading(true);\n      // Map form data to backend payload\n      const payload = {\n        patientId: (user === null || user === void 0 ? void 0 : (_user$id = user.id) === null || _user$id === void 0 ? void 0 : (_user$id$toString = _user$id.toString) === null || _user$id$toString === void 0 ? void 0 : _user$id$toString.call(_user$id)) || 'P_TEMP',\n        patientName: (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.fullName) || 'Patient',\n        date: appointmentData.scheduledDate,\n        time: appointmentData.scheduledTime,\n        type: appointmentData.treatmentType,\n        treatmentType: mapTreatmentType(appointmentData.treatmentType),\n        doctorId: (_appointmentData$prac = appointmentData.practitionerId) === null || _appointmentData$prac === void 0 ? void 0 : (_appointmentData$prac2 = _appointmentData$prac.toString) === null || _appointmentData$prac2 === void 0 ? void 0 : _appointmentData$prac2.call(_appointmentData$prac)\n      };\n      const {\n        data\n      } = await appointmentAPI.create(payload);\n      const created = data.appointment || data;\n\n      // Normalize into frontend shape minimally\n      const newAppointment = {\n        id: created.id,\n        scheduledDate: created.date,\n        scheduledTime: created.time,\n        duration: appointmentData.duration,\n        treatmentType: appointmentData.treatmentType,\n        status: created.status,\n        practitioner: created.doctor ? {\n          id: created.doctor.id,\n          fullName: created.doctor.name\n        } : null,\n        notes: appointmentData.notes\n      };\n      setAppointments(prev => [...prev, newAppointment]);\n      setLoading(false);\n      return newAppointment;\n    } catch (err) {\n      setError(err.message || 'Failed to book appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Helper to map UI treatment ids to backend treatment types\n  function mapTreatmentType(uiId) {\n    const map = {\n      panchakarma: 'Panchakarma',\n      abhyanga: 'Abhyanga',\n      shirodhara: 'Shirodhara',\n      swedana: 'Udvartana',\n      // closest mapping for demo\n      nasya: 'Panchakarma',\n      // placeholder\n      basti: 'Panchakarma' // placeholder\n    };\n    return map[uiId] || uiId;\n  }\n  const rescheduleAppointment = async (appointmentId, newDateTime) => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // const response = await api.put(`/appointments/${appointmentId}/reschedule`, {\n      //   scheduledDate: newDateTime.date,\n      //   scheduledTime: newDateTime.time\n      // });\n\n      // Mock implementation\n      setAppointments(prev => prev.map(apt => apt.id === appointmentId ? {\n        ...apt,\n        scheduledDate: (newDateTime === null || newDateTime === void 0 ? void 0 : newDateTime.date) || apt.scheduledDate,\n        scheduledTime: (newDateTime === null || newDateTime === void 0 ? void 0 : newDateTime.time) || apt.scheduledTime,\n        status: 'pending'\n      } : apt));\n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to reschedule appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n  const cancelAppointment = async appointmentId => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // await api.put(`/appointments/${appointmentId}/cancel`);\n\n      // Mock implementation\n      setAppointments(prev => prev.map(apt => apt.id === appointmentId ? {\n        ...apt,\n        status: 'cancelled'\n      } : apt));\n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to cancel appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n  const getUpcomingAppointments = (limit = 5) => {\n    const now = new Date();\n    return appointments.filter(apt => new Date(apt.scheduledDate) >= now && apt.status !== 'cancelled').sort((a, b) => new Date(a.scheduledDate) - new Date(b.scheduledDate)).slice(0, limit);\n  };\n  const getAppointmentsByDateRange = (startDate, endDate) => {\n    return appointments.filter(apt => {\n      const aptDate = new Date(apt.scheduledDate);\n      return aptDate >= startDate && aptDate <= endDate;\n    });\n  };\n  const getTodaysAppointments = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return appointments.filter(apt => apt.scheduledDate === today && apt.status !== 'cancelled');\n  };\n  useEffect(() => {\n    if (user) {\n      fetchAppointments();\n    }\n  }, [user]);\n  return {\n    appointments,\n    loading,\n    error,\n    bookAppointment,\n    rescheduleAppointment,\n    cancelAppointment,\n    getUpcomingAppointments,\n    getAppointmentsByDateRange,\n    getTodaysAppointments,\n    refetch: fetchAppointments\n  };\n};\n_s(useAppointments, \"DENyoAlus7WUzAmSPYtcC7HSrys=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useAuth","appointmentAPI","useAppointments","_s","appointments","setAppointments","loading","setLoading","error","setError","user","mockAppointments","id","scheduledDate","scheduledTime","duration","treatmentType","status","practitioner","fullName","location","notes","isVirtual","preparationInstructions","fetchAppointments","setTimeout","err","message","bookAppointment","appointmentData","_user$id","_user$id$toString","_appointmentData$prac","_appointmentData$prac2","payload","patientId","toString","call","patientName","name","date","time","type","mapTreatmentType","doctorId","practitionerId","data","create","created","appointment","newAppointment","doctor","prev","uiId","map","panchakarma","abhyanga","shirodhara","swedana","nasya","basti","rescheduleAppointment","appointmentId","newDateTime","apt","cancelAppointment","getUpcomingAppointments","limit","now","Date","filter","sort","a","b","slice","getAppointmentsByDateRange","startDate","endDate","aptDate","getTodaysAppointments","today","toISOString","split","refetch"],"sources":["C:/Users/tadik/Downloads/NavAyush_SIH-main/NavAyush_SIH-main/ayursutra/frontend/src/hooks/useAppointments.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { appointmentAPI } from '../services/api';\n\nexport const useAppointments = () => {\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { user } = useAuth();\n\n  // Mock data for development\n  const mockAppointments = [\n    {\n      id: 1,\n      scheduledDate: '2025-01-15',\n      scheduledTime: '10:00:00',\n      duration: 60,\n      treatmentType: 'abhyanga',\n      status: 'confirmed',\n      practitioner: {\n        id: 1,\n        fullName: 'Priya Sharma'\n      },\n      location: 'Room 101',\n      notes: 'Please arrive 15 minutes early for preparation',\n      isVirtual: false,\n      preparationInstructions: [\n        'Avoid heavy meals 2 hours before treatment',\n        'Wear comfortable, loose clothing',\n        'Bring a change of clothes'\n      ]\n    },\n    {\n      id: 2,\n      scheduledDate: '2025-01-17',\n      scheduledTime: '14:30:00',\n      duration: 90,\n      treatmentType: 'shirodhara',\n      status: 'confirmed',\n      practitioner: {\n        id: 2,\n        fullName: 'Rajesh Kumar'\n      },\n      location: 'Room 203',\n      notes: 'Stress relief session',\n      isVirtual: false,\n      preparationInstructions: [\n        'Avoid caffeine 4 hours before treatment',\n        'Come with clean, dry hair',\n        'Remove all jewelry and accessories'\n      ]\n    },\n    {\n      id: 3,\n      scheduledDate: '2025-01-20',\n      scheduledTime: '09:00:00',\n      duration: 45,\n      treatmentType: 'consultation',\n      status: 'pending',\n      practitioner: {\n        id: 1,\n        fullName: 'Priya Sharma'\n      },\n      location: 'Virtual',\n      notes: 'Progress review and treatment plan adjustment',\n      isVirtual: true,\n      preparationInstructions: [\n        'Prepare list of any concerns or questions',\n        'Have your treatment journal ready',\n        'Ensure stable internet connection'\n      ]\n    }\n  ];\n\n  const fetchAppointments = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // In production, this would be an actual API call\n      // const response = await api.get('/appointments');\n      // setAppointments(response.data);\n      \n      // For now, use mock data\n      setTimeout(() => {\n        setAppointments(mockAppointments);\n        setLoading(false);\n      }, 1000);\n      \n    } catch (err) {\n      setError(err.message || 'Failed to fetch appointments');\n      setLoading(false);\n    }\n  };\n\n  const bookAppointment = async (appointmentData) => {\n    try {\n      setLoading(true);\n      // Map form data to backend payload\n      const payload = {\n        patientId: user?.id?.toString?.() || 'P_TEMP',\n        patientName: user?.name || user?.fullName || 'Patient',\n        date: appointmentData.scheduledDate,\n        time: appointmentData.scheduledTime,\n        type: appointmentData.treatmentType,\n        treatmentType: mapTreatmentType(appointmentData.treatmentType),\n        doctorId: appointmentData.practitionerId?.toString?.()\n      };\n\n      const { data } = await appointmentAPI.create(payload);\n      const created = data.appointment || data;\n\n      // Normalize into frontend shape minimally\n      const newAppointment = {\n        id: created.id,\n        scheduledDate: created.date,\n        scheduledTime: created.time,\n        duration: appointmentData.duration,\n        treatmentType: appointmentData.treatmentType,\n        status: created.status,\n        practitioner: created.doctor ? { id: created.doctor.id, fullName: created.doctor.name } : null,\n        notes: appointmentData.notes\n      };\n\n      setAppointments(prev => [...prev, newAppointment]);\n      setLoading(false);\n      return newAppointment;\n    } catch (err) {\n      setError(err.message || 'Failed to book appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Helper to map UI treatment ids to backend treatment types\n  function mapTreatmentType(uiId) {\n    const map = {\n      panchakarma: 'Panchakarma',\n      abhyanga: 'Abhyanga',\n      shirodhara: 'Shirodhara',\n      swedana: 'Udvartana', // closest mapping for demo\n      nasya: 'Panchakarma', // placeholder\n      basti: 'Panchakarma' // placeholder\n    };\n    return map[uiId] || uiId;\n  }\n\n  const rescheduleAppointment = async (appointmentId, newDateTime) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // const response = await api.put(`/appointments/${appointmentId}/reschedule`, {\n      //   scheduledDate: newDateTime.date,\n      //   scheduledTime: newDateTime.time\n      // });\n      \n      // Mock implementation\n      setAppointments(prev => \n        prev.map(apt => \n          apt.id === appointmentId \n            ? { \n                ...apt, \n                scheduledDate: newDateTime?.date || apt.scheduledDate,\n                scheduledTime: newDateTime?.time || apt.scheduledTime,\n                status: 'pending'\n              }\n            : apt\n        )\n      );\n      \n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to reschedule appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const cancelAppointment = async (appointmentId) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // await api.put(`/appointments/${appointmentId}/cancel`);\n      \n      // Mock implementation\n      setAppointments(prev => \n        prev.map(apt => \n          apt.id === appointmentId \n            ? { ...apt, status: 'cancelled' }\n            : apt\n        )\n      );\n      \n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to cancel appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const getUpcomingAppointments = (limit = 5) => {\n    const now = new Date();\n    return appointments\n      .filter(apt => new Date(apt.scheduledDate) >= now && apt.status !== 'cancelled')\n      .sort((a, b) => new Date(a.scheduledDate) - new Date(b.scheduledDate))\n      .slice(0, limit);\n  };\n\n  const getAppointmentsByDateRange = (startDate, endDate) => {\n    return appointments.filter(apt => {\n      const aptDate = new Date(apt.scheduledDate);\n      return aptDate >= startDate && aptDate <= endDate;\n    });\n  };\n\n  const getTodaysAppointments = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return appointments.filter(apt => \n      apt.scheduledDate === today && apt.status !== 'cancelled'\n    );\n  };\n\n  useEffect(() => {\n    if (user) {\n      fetchAppointments();\n    }\n  }, [user]);\n\n  return {\n    appointments,\n    loading,\n    error,\n    bookAppointment,\n    rescheduleAppointment,\n    cancelAppointment,\n    getUpcomingAppointments,\n    getAppointmentsByDateRange,\n    getTodaysAppointments,\n    refetch: fetchAppointments\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}