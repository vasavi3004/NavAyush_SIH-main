{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utkarsh\\\\OneDrive\\\\Desktop\\\\AYURSUTRA DRAFT\\\\ayursutra\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('accessToken');\n      if (token) {\n        try {\n          // In production, verify token with backend\n          // const response = await authAPI.getCurrentUser();\n          // setUser(response.data);\n\n          // Mock user data for development\n          const mockUser = {\n            id: 1,\n            email: 'patient@ayursutra.com',\n            fullName: 'John Doe',\n            role: 'patient',\n            isActive: true,\n            isVerified: true,\n            phone: '+1234567890',\n            dateOfBirth: '1990-01-01'\n          };\n          setUser(mockUser);\n          setIsAuthenticated(true);\n        } catch (error) {\n          // Token is invalid, remove it\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n        }\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n\n      // In production, this would be actual API call\n      // const response = await authAPI.login({ email, password });\n      // const { user, accessToken, refreshToken } = response.data;\n\n      // Mock login for development\n      if (email && password) {\n        const mockResponse = {\n          user: {\n            id: 1,\n            email: email,\n            fullName: 'John Doe',\n            role: 'patient',\n            isActive: true,\n            isVerified: true,\n            phone: '+1234567890',\n            dateOfBirth: '1990-01-01'\n          },\n          accessToken: 'mock-access-token',\n          refreshToken: 'mock-refresh-token'\n        };\n        localStorage.setItem('accessToken', mockResponse.accessToken);\n        localStorage.setItem('refreshToken', mockResponse.refreshToken);\n        setUser(mockResponse.user);\n        setIsAuthenticated(true);\n        return mockResponse;\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // const response = await authAPI.register(userData);\n      // const { user, accessToken, refreshToken } = response.data;\n\n      // Mock registration\n      const mockResponse = {\n        user: {\n          id: Date.now(),\n          email: userData.email,\n          fullName: userData.fullName,\n          role: userData.role || 'patient',\n          isActive: true,\n          isVerified: false,\n          phone: userData.phone,\n          dateOfBirth: userData.dateOfBirth\n        },\n        accessToken: 'mock-access-token',\n        refreshToken: 'mock-refresh-token'\n      };\n      localStorage.setItem('accessToken', mockResponse.accessToken);\n      localStorage.setItem('refreshToken', mockResponse.refreshToken);\n      setUser(mockResponse.user);\n      setIsAuthenticated(true);\n      return mockResponse;\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      // In production, notify backend\n      // await authAPI.logout();\n\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      // Even if logout fails on backend, clear local state\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // const response = await authAPI.updateProfile(profileData);\n      // setUser(response.data);\n\n      // Mock update\n      setUser(prev => ({\n        ...prev,\n        ...profileData\n      }));\n      return user;\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // await authAPI.forgotPassword(email);\n\n      // Mock implementation\n      console.log('Password reset email sent to:', email);\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetPassword = async (token, newPassword) => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // await authAPI.resetPassword(token, newPassword);\n\n      // Mock implementation\n      console.log('Password reset successful');\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const refreshToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      // In production:\n      // const response = await authAPI.refreshToken(refreshToken);\n      // const { accessToken } = response.data;\n\n      // Mock refresh\n      const newAccessToken = 'new-mock-access-token';\n      localStorage.setItem('accessToken', newAccessToken);\n      return newAccessToken;\n    } catch (error) {\n      logout();\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateProfile,\n    forgotPassword,\n    resetPassword,\n    refreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","initializeAuth","token","localStorage","getItem","mockUser","id","email","fullName","role","isActive","isVerified","phone","dateOfBirth","error","removeItem","login","password","mockResponse","accessToken","refreshToken","setItem","register","userData","Date","now","logout","updateProfile","profileData","prev","forgotPassword","console","log","resetPassword","newPassword","newAccessToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Utkarsh/OneDrive/Desktop/AYURSUTRA DRAFT/ayursutra/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('accessToken');\n      if (token) {\n        try {\n          // In production, verify token with backend\n          // const response = await authAPI.getCurrentUser();\n          // setUser(response.data);\n          \n          // Mock user data for development\n          const mockUser = {\n            id: 1,\n            email: 'patient@ayursutra.com',\n            fullName: 'John Doe',\n            role: 'patient',\n            isActive: true,\n            isVerified: true,\n            phone: '+1234567890',\n            dateOfBirth: '1990-01-01'\n          };\n          \n          setUser(mockUser);\n          setIsAuthenticated(true);\n        } catch (error) {\n          // Token is invalid, remove it\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n        }\n      }\n      setLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      \n      // In production, this would be actual API call\n      // const response = await authAPI.login({ email, password });\n      // const { user, accessToken, refreshToken } = response.data;\n      \n      // Mock login for development\n      if (email && password) {\n        const mockResponse = {\n          user: {\n            id: 1,\n            email: email,\n            fullName: 'John Doe',\n            role: 'patient',\n            isActive: true,\n            isVerified: true,\n            phone: '+1234567890',\n            dateOfBirth: '1990-01-01'\n          },\n          accessToken: 'mock-access-token',\n          refreshToken: 'mock-refresh-token'\n        };\n\n        localStorage.setItem('accessToken', mockResponse.accessToken);\n        localStorage.setItem('refreshToken', mockResponse.refreshToken);\n        \n        setUser(mockResponse.user);\n        setIsAuthenticated(true);\n        \n        return mockResponse;\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // const response = await authAPI.register(userData);\n      // const { user, accessToken, refreshToken } = response.data;\n      \n      // Mock registration\n      const mockResponse = {\n        user: {\n          id: Date.now(),\n          email: userData.email,\n          fullName: userData.fullName,\n          role: userData.role || 'patient',\n          isActive: true,\n          isVerified: false,\n          phone: userData.phone,\n          dateOfBirth: userData.dateOfBirth\n        },\n        accessToken: 'mock-access-token',\n        refreshToken: 'mock-refresh-token'\n      };\n\n      localStorage.setItem('accessToken', mockResponse.accessToken);\n      localStorage.setItem('refreshToken', mockResponse.refreshToken);\n      \n      setUser(mockResponse.user);\n      setIsAuthenticated(true);\n      \n      return mockResponse;\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // In production, notify backend\n      // await authAPI.logout();\n      \n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      \n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      // Even if logout fails on backend, clear local state\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n\n  const updateProfile = async (profileData) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // const response = await authAPI.updateProfile(profileData);\n      // setUser(response.data);\n      \n      // Mock update\n      setUser(prev => ({ ...prev, ...profileData }));\n      \n      return user;\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const forgotPassword = async (email) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // await authAPI.forgotPassword(email);\n      \n      // Mock implementation\n      console.log('Password reset email sent to:', email);\n      \n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (token, newPassword) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // await authAPI.resetPassword(token, newPassword);\n      \n      // Mock implementation\n      console.log('Password reset successful');\n      \n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const refreshToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      // In production:\n      // const response = await authAPI.refreshToken(refreshToken);\n      // const { accessToken } = response.data;\n      \n      // Mock refresh\n      const newAccessToken = 'new-mock-access-token';\n      localStorage.setItem('accessToken', newAccessToken);\n      \n      return newAccessToken;\n    } catch (error) {\n      logout();\n      throw error;\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateProfile,\n    forgotPassword,\n    resetPassword,\n    refreshToken\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACAC,SAAS,CAAC,MAAM;IACd,MAAMkB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MACjD,IAAIF,KAAK,EAAE;QACT,IAAI;UACF;UACA;UACA;;UAEA;UACA,MAAMG,QAAQ,GAAG;YACfC,EAAE,EAAE,CAAC;YACLC,KAAK,EAAE,uBAAuB;YAC9BC,QAAQ,EAAE,UAAU;YACpBC,IAAI,EAAE,SAAS;YACfC,QAAQ,EAAE,IAAI;YACdC,UAAU,EAAE,IAAI;YAChBC,KAAK,EAAE,aAAa;YACpBC,WAAW,EAAE;UACf,CAAC;UAEDjB,OAAO,CAACS,QAAQ,CAAC;UACjBL,kBAAkB,CAAC,IAAI,CAAC;QAC1B,CAAC,CAAC,OAAOc,KAAK,EAAE;UACd;UACAX,YAAY,CAACY,UAAU,CAAC,aAAa,CAAC;UACtCZ,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;QACzC;MACF;MACAjB,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAEDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,KAAK,GAAG,MAAAA,CAAOT,KAAK,EAAEU,QAAQ,KAAK;IACvC,IAAI;MACFnB,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA;MACA;;MAEA;MACA,IAAIS,KAAK,IAAIU,QAAQ,EAAE;QACrB,MAAMC,YAAY,GAAG;UACnBvB,IAAI,EAAE;YACJW,EAAE,EAAE,CAAC;YACLC,KAAK,EAAEA,KAAK;YACZC,QAAQ,EAAE,UAAU;YACpBC,IAAI,EAAE,SAAS;YACfC,QAAQ,EAAE,IAAI;YACdC,UAAU,EAAE,IAAI;YAChBC,KAAK,EAAE,aAAa;YACpBC,WAAW,EAAE;UACf,CAAC;UACDM,WAAW,EAAE,mBAAmB;UAChCC,YAAY,EAAE;QAChB,CAAC;QAEDjB,YAAY,CAACkB,OAAO,CAAC,aAAa,EAAEH,YAAY,CAACC,WAAW,CAAC;QAC7DhB,YAAY,CAACkB,OAAO,CAAC,cAAc,EAAEH,YAAY,CAACE,YAAY,CAAC;QAE/DxB,OAAO,CAACsB,YAAY,CAACvB,IAAI,CAAC;QAC1BK,kBAAkB,CAAC,IAAI,CAAC;QAExB,OAAOkB,YAAY;MACrB,CAAC,MAAM;QACL,MAAM,IAAI3B,KAAK,CAAC,qBAAqB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOuB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMwB,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACFzB,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA;MACA;;MAEA;MACA,MAAMoB,YAAY,GAAG;QACnBvB,IAAI,EAAE;UACJW,EAAE,EAAEkB,IAAI,CAACC,GAAG,CAAC,CAAC;UACdlB,KAAK,EAAEgB,QAAQ,CAAChB,KAAK;UACrBC,QAAQ,EAAEe,QAAQ,CAACf,QAAQ;UAC3BC,IAAI,EAAEc,QAAQ,CAACd,IAAI,IAAI,SAAS;UAChCC,QAAQ,EAAE,IAAI;UACdC,UAAU,EAAE,KAAK;UACjBC,KAAK,EAAEW,QAAQ,CAACX,KAAK;UACrBC,WAAW,EAAEU,QAAQ,CAACV;QACxB,CAAC;QACDM,WAAW,EAAE,mBAAmB;QAChCC,YAAY,EAAE;MAChB,CAAC;MAEDjB,YAAY,CAACkB,OAAO,CAAC,aAAa,EAAEH,YAAY,CAACC,WAAW,CAAC;MAC7DhB,YAAY,CAACkB,OAAO,CAAC,cAAc,EAAEH,YAAY,CAACE,YAAY,CAAC;MAE/DxB,OAAO,CAACsB,YAAY,CAACvB,IAAI,CAAC;MAC1BK,kBAAkB,CAAC,IAAI,CAAC;MAExB,OAAOkB,YAAY;IACrB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd,MAAMA,KAAK;IACb,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM4B,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF;MACA;;MAEAvB,YAAY,CAACY,UAAU,CAAC,aAAa,CAAC;MACtCZ,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;MAEvCnB,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,KAAK,CAAC;IAC3B,CAAC,CAAC,OAAOc,KAAK,EAAE;MACd;MACAX,YAAY,CAACY,UAAU,CAAC,aAAa,CAAC;MACtCZ,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;MACvCnB,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC;EAED,MAAM2B,aAAa,GAAG,MAAOC,WAAW,IAAK;IAC3C,IAAI;MACF9B,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA;MACA;;MAEA;MACAF,OAAO,CAACiC,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,GAAGD;MAAY,CAAC,CAAC,CAAC;MAE9C,OAAOjC,IAAI;IACb,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMgC,cAAc,GAAG,MAAOvB,KAAK,IAAK;IACtC,IAAI;MACFT,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA;;MAEA;MACAiC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEzB,KAAK,CAAC;IAErD,CAAC,CAAC,OAAOO,KAAK,EAAE;MACd,MAAMA,KAAK;IACb,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMmC,aAAa,GAAG,MAAAA,CAAO/B,KAAK,EAAEgC,WAAW,KAAK;IAClD,IAAI;MACFpC,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA;;MAEA;MACAiC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAE1C,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMsB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMA,YAAY,GAAGjB,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,IAAI,CAACgB,YAAY,EAAE;QACjB,MAAM,IAAI7B,KAAK,CAAC,4BAA4B,CAAC;MAC/C;;MAEA;MACA;MACA;;MAEA;MACA,MAAM4C,cAAc,GAAG,uBAAuB;MAC9ChC,YAAY,CAACkB,OAAO,CAAC,aAAa,EAAEc,cAAc,CAAC;MAEnD,OAAOA,cAAc;IACvB,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdY,MAAM,CAAC,CAAC;MACR,MAAMZ,KAAK;IACb;EACF,CAAC;EAED,MAAMsB,KAAK,GAAG;IACZzC,IAAI;IACJE,OAAO;IACPE,eAAe;IACfiB,KAAK;IACLM,QAAQ;IACRI,MAAM;IACNC,aAAa;IACbG,cAAc;IACdG,aAAa;IACbb;EACF,CAAC;EAED,oBACElC,OAAA,CAACC,WAAW,CAACkD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA3C,QAAA,EAChCA;EAAQ;IAAA6C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/C,GAAA,CAzOWF,YAAY;AAAAkD,EAAA,GAAZlD,YAAY;AAAA,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}