{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const usePatientManagement = () => {\n  _s();\n  const [patients, setPatients] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Mock patients data\n  const mockPatients = [{\n    id: 'P001',\n    name: 'Rajesh Kumar',\n    age: 45,\n    gender: 'Male',\n    phone: '+91 98765 43210',\n    email: 'rajesh.kumar@email.com',\n    constitution: 'Vata-Pitta',\n    lastVisit: '2025-01-15',\n    status: 'Active',\n    nextAppointment: '2025-01-22'\n  }, {\n    id: 'P002',\n    name: 'Priya Sharma',\n    age: 32,\n    gender: 'Female',\n    phone: '+91 87654 32109',\n    email: 'priya.sharma@email.com',\n    constitution: 'Pitta-Kapha',\n    lastVisit: '2025-01-18',\n    status: 'Active',\n    nextAppointment: '2025-01-25'\n  }, {\n    id: 'P003',\n    name: 'Amit Patel',\n    age: 38,\n    gender: 'Male',\n    phone: '+91 76543 21098',\n    email: 'amit.patel@email.com',\n    constitution: 'Kapha-Vata',\n    lastVisit: '2025-01-10',\n    status: 'Completed',\n    nextAppointment: null\n  }];\n  useEffect(() => {\n    // Simulate API call\n    const fetchPatients = async () => {\n      try {\n        setLoading(true);\n        // Simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setPatients(mockPatients);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch patients');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPatients();\n  }, []);\n  const addPatient = patientData => {\n    const newPatient = {\n      id: `P${String(patients.length + 1).padStart(3, '0')}`,\n      ...patientData,\n      status: 'Active'\n    };\n    setPatients(prev => [...prev, newPatient]);\n    return newPatient;\n  };\n  const updatePatient = (patientId, updates) => {\n    setPatients(prev => prev.map(patient => patient.id === patientId ? {\n      ...patient,\n      ...updates\n    } : patient));\n  };\n  const deletePatient = patientId => {\n    setPatients(prev => prev.filter(patient => patient.id !== patientId));\n  };\n  const searchPatients = query => {\n    if (!query) return patients;\n    return patients.filter(patient => patient.name.toLowerCase().includes(query.toLowerCase()) || patient.email.toLowerCase().includes(query.toLowerCase()) || patient.phone.includes(query) || patient.id.toLowerCase().includes(query.toLowerCase()));\n  };\n  return {\n    patients,\n    loading,\n    error,\n    addPatient,\n    updatePatient,\n    deletePatient,\n    searchPatients\n  };\n};\n_s(usePatientManagement, \"mgWLQyRnL9WaHj0NPnrfp9Rgc84=\");","map":{"version":3,"names":["useState","useEffect","usePatientManagement","_s","patients","setPatients","loading","setLoading","error","setError","mockPatients","id","name","age","gender","phone","email","constitution","lastVisit","status","nextAppointment","fetchPatients","Promise","resolve","setTimeout","err","addPatient","patientData","newPatient","String","length","padStart","prev","updatePatient","patientId","updates","map","patient","deletePatient","filter","searchPatients","query","toLowerCase","includes"],"sources":["C:/Users/Utkarsh/OneDrive/Desktop/AYURSUTRA DRAFT/ayursutra/frontend/src/hooks/usePatientManagement.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const usePatientManagement = () => {\n  const [patients, setPatients] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Mock patients data\n  const mockPatients = [\n    {\n      id: 'P001',\n      name: 'Rajesh Kumar',\n      age: 45,\n      gender: 'Male',\n      phone: '+91 98765 43210',\n      email: 'rajesh.kumar@email.com',\n      constitution: 'Vata-Pitta',\n      lastVisit: '2025-01-15',\n      status: 'Active',\n      nextAppointment: '2025-01-22'\n    },\n    {\n      id: 'P002',\n      name: 'Priya Sharma',\n      age: 32,\n      gender: 'Female',\n      phone: '+91 87654 32109',\n      email: 'priya.sharma@email.com',\n      constitution: 'Pitta-Kapha',\n      lastVisit: '2025-01-18',\n      status: 'Active',\n      nextAppointment: '2025-01-25'\n    },\n    {\n      id: 'P003',\n      name: 'Amit Patel',\n      age: 38,\n      gender: 'Male',\n      phone: '+91 76543 21098',\n      email: 'amit.patel@email.com',\n      constitution: 'Kapha-Vata',\n      lastVisit: '2025-01-10',\n      status: 'Completed',\n      nextAppointment: null\n    }\n  ];\n\n  useEffect(() => {\n    // Simulate API call\n    const fetchPatients = async () => {\n      try {\n        setLoading(true);\n        // Simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setPatients(mockPatients);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch patients');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPatients();\n  }, []);\n\n  const addPatient = (patientData) => {\n    const newPatient = {\n      id: `P${String(patients.length + 1).padStart(3, '0')}`,\n      ...patientData,\n      status: 'Active'\n    };\n    setPatients(prev => [...prev, newPatient]);\n    return newPatient;\n  };\n\n  const updatePatient = (patientId, updates) => {\n    setPatients(prev => \n      prev.map(patient => \n        patient.id === patientId \n          ? { ...patient, ...updates }\n          : patient\n      )\n    );\n  };\n\n  const deletePatient = (patientId) => {\n    setPatients(prev => prev.filter(patient => patient.id !== patientId));\n  };\n\n  const searchPatients = (query) => {\n    if (!query) return patients;\n    \n    return patients.filter(patient =>\n      patient.name.toLowerCase().includes(query.toLowerCase()) ||\n      patient.email.toLowerCase().includes(query.toLowerCase()) ||\n      patient.phone.includes(query) ||\n      patient.id.toLowerCase().includes(query.toLowerCase())\n    );\n  };\n\n  return {\n    patients,\n    loading,\n    error,\n    addPatient,\n    updatePatient,\n    deletePatient,\n    searchPatients\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}