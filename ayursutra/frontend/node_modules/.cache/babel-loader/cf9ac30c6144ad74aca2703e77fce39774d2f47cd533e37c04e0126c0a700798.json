{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport api from '../services/api';\nexport const usePatientProgress = () => {\n  _s();\n  const [progressData, setProgressData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n\n  // Mock progress data for development\n  const mockProgressData = {\n    overall: {\n      currentProgress: 65,\n      totalSessions: 21,\n      completedSessions: 14,\n      currentPhase: 'pradhankarma',\n      startDate: '2024-01-01',\n      estimatedEndDate: '2024-01-28'\n    },\n    metrics: {\n      energy: {\n        current: 9,\n        previous: 6,\n        trend: 'up'\n      },\n      sleep: {\n        current: 9,\n        previous: 7,\n        trend: 'up'\n      },\n      digestion: {\n        current: 9,\n        previous: 5,\n        trend: 'up'\n      },\n      stress: {\n        current: 3,\n        previous: 8,\n        trend: 'down'\n      },\n      pain: {\n        current: 2,\n        previous: 7,\n        trend: 'down'\n      }\n    },\n    timeline: [{\n      date: '2024-01-01',\n      progress: 10,\n      energy: 6,\n      sleep: 7,\n      digestion: 5,\n      stress: 8,\n      pain: 7\n    }, {\n      date: '2024-01-03',\n      progress: 18,\n      energy: 7,\n      sleep: 7,\n      digestion: 6,\n      stress: 7,\n      pain: 6\n    }, {\n      date: '2024-01-05',\n      progress: 25,\n      energy: 7,\n      sleep: 8,\n      digestion: 7,\n      stress: 6,\n      pain: 5\n    }, {\n      date: '2024-01-07',\n      progress: 35,\n      energy: 8,\n      sleep: 8,\n      digestion: 7,\n      stress: 5,\n      pain: 4\n    }, {\n      date: '2024-01-09',\n      progress: 42,\n      energy: 8,\n      sleep: 9,\n      digestion: 8,\n      stress: 4,\n      pain: 3\n    }, {\n      date: '2024-01-11',\n      progress: 50,\n      energy: 9,\n      sleep: 9,\n      digestion: 8,\n      stress: 4,\n      pain: 3\n    }, {\n      date: '2024-01-13',\n      progress: 58,\n      energy: 9,\n      sleep: 8,\n      digestion: 9,\n      stress: 3,\n      pain: 2\n    }, {\n      date: '2024-01-15',\n      progress: 65,\n      energy: 9,\n      sleep: 9,\n      digestion: 9,\n      stress: 3,\n      pain: 2\n    }],\n    symptoms: [{\n      name: 'Chronic Fatigue',\n      before: 9,\n      current: 2,\n      improvement: 78\n    }, {\n      name: 'Digestive Issues',\n      before: 7,\n      current: 2,\n      improvement: 71\n    }, {\n      name: 'Sleep Problems',\n      before: 6,\n      current: 1,\n      improvement: 83\n    }, {\n      name: 'Joint Pain',\n      before: 5,\n      current: 1,\n      improvement: 80\n    }, {\n      name: 'Stress & Anxiety',\n      before: 8,\n      current: 3,\n      improvement: 62\n    }],\n    constitution: {\n      vata: {\n        balance: 75,\n        trend: 'stable'\n      },\n      pitta: {\n        balance: 85,\n        trend: 'improving'\n      },\n      kapha: {\n        balance: 70,\n        trend: 'improving'\n      }\n    },\n    milestones: [{\n      id: 1,\n      name: 'Treatment Started',\n      date: '2024-01-01',\n      completed: true\n    }, {\n      id: 2,\n      name: 'Purvakarma Completed',\n      date: '2024-01-07',\n      completed: true\n    }, {\n      id: 3,\n      name: 'Energy Improvement',\n      date: '2024-01-08',\n      completed: true\n    }, {\n      id: 4,\n      name: 'Midpoint Reached',\n      date: '2024-01-12',\n      completed: true\n    }, {\n      id: 5,\n      name: 'Symptom Relief',\n      date: '2024-01-15',\n      completed: false\n    }, {\n      id: 6,\n      name: 'Pradhankarma Complete',\n      date: '2024-01-20',\n      completed: false\n    }, {\n      id: 7,\n      name: 'Treatment Complete',\n      date: '2024-01-28',\n      completed: false\n    }]\n  };\n  const fetchProgressData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // In production, this would be actual API calls\n      // const response = await api.get('/patient/progress');\n      // setProgressData(response.data);\n\n      // For now, use mock data\n      setTimeout(() => {\n        setProgressData(mockProgressData);\n        setLoading(false);\n      }, 800);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch progress data');\n      setLoading(false);\n    }\n  };\n  const updateProgressEntry = async (date, metrics) => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // const response = await api.post('/patient/progress', { date, ...metrics });\n\n      // Mock implementation\n      setProgressData(prev => ({\n        ...prev,\n        timeline: [...prev.timeline, {\n          date,\n          ...metrics\n        }].sort((a, b) => new Date(a.date) - new Date(b.date))\n      }));\n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to update progress');\n      setLoading(false);\n      throw err;\n    }\n  };\n  const getProgressTrend = (metric, days = 7) => {\n    if (!(progressData !== null && progressData !== void 0 && progressData.timeline)) return null;\n    const recentData = progressData.timeline.slice(-days);\n    if (recentData.length < 2) return null;\n    const firstValue = recentData[0][metric];\n    const lastValue = recentData[recentData.length - 1][metric];\n    const change = lastValue - firstValue;\n    const percentChange = change / firstValue * 100;\n    return {\n      change,\n      percentChange,\n      trend: change > 0 ? 'up' : change < 0 ? 'down' : 'stable'\n    };\n  };\n  const getSymptomImprovement = symptomName => {\n    if (!(progressData !== null && progressData !== void 0 && progressData.symptoms)) return null;\n    const symptom = progressData.symptoms.find(s => s.name === symptomName);\n    return symptom ? symptom.improvement : null;\n  };\n  const getCurrentPhaseProgress = () => {\n    if (!(progressData !== null && progressData !== void 0 && progressData.overall)) return null;\n    const {\n      currentPhase,\n      currentProgress\n    } = progressData.overall;\n\n    // Calculate phase-specific progress\n    const phaseRanges = {\n      purvakarma: {\n        start: 0,\n        end: 25\n      },\n      pradhankarma: {\n        start: 25,\n        end: 80\n      },\n      paschatkarma: {\n        start: 80,\n        end: 100\n      }\n    };\n    const range = phaseRanges[currentPhase];\n    if (!range) return null;\n    const phaseProgress = (currentProgress - range.start) / (range.end - range.start) * 100;\n    return {\n      phase: currentPhase,\n      progress: Math.max(0, Math.min(100, phaseProgress)),\n      isComplete: currentProgress >= range.end\n    };\n  };\n  const getWeeklyReport = () => {\n    var _lastWeek$, _lastWeek, _lastWeek2, _lastWeek$2;\n    if (!(progressData !== null && progressData !== void 0 && progressData.timeline)) return null;\n    const lastWeek = progressData.timeline.slice(-7);\n    if (lastWeek.length === 0) return null;\n    const metrics = ['energy', 'sleep', 'digestion', 'stress', 'pain'];\n    const averages = {};\n    metrics.forEach(metric => {\n      const values = lastWeek.map(day => day[metric]).filter(val => val !== undefined);\n      averages[metric] = values.length > 0 ? values.reduce((sum, val) => sum + val, 0) / values.length : 0;\n    });\n    return {\n      period: `${(_lastWeek$ = lastWeek[0]) === null || _lastWeek$ === void 0 ? void 0 : _lastWeek$.date} - ${(_lastWeek = lastWeek[lastWeek.length - 1]) === null || _lastWeek === void 0 ? void 0 : _lastWeek.date}`,\n      averages,\n      totalSessions: lastWeek.length,\n      progressGain: ((_lastWeek2 = lastWeek[lastWeek.length - 1]) === null || _lastWeek2 === void 0 ? void 0 : _lastWeek2.progress) - ((_lastWeek$2 = lastWeek[0]) === null || _lastWeek$2 === void 0 ? void 0 : _lastWeek$2.progress)\n    };\n  };\n  const getConstitutionBalance = () => {\n    return (progressData === null || progressData === void 0 ? void 0 : progressData.constitution) || null;\n  };\n  const getMilestones = () => {\n    return (progressData === null || progressData === void 0 ? void 0 : progressData.milestones) || [];\n  };\n  const getNextMilestone = () => {\n    if (!(progressData !== null && progressData !== void 0 && progressData.milestones)) return null;\n    return progressData.milestones.find(m => !m.completed);\n  };\n  useEffect(() => {\n    if (user) {\n      fetchProgressData();\n    }\n  }, [user]);\n  return {\n    progressData,\n    loading,\n    error,\n    updateProgressEntry,\n    getProgressTrend,\n    getSymptomImprovement,\n    getCurrentPhaseProgress,\n    getWeeklyReport,\n    getConstitutionBalance,\n    getMilestones,\n    getNextMilestone,\n    refetch: fetchProgressData\n  };\n};\n_s(usePatientProgress, \"Ji6qWYqpPtK4Rm72oPpcdtxM6Gk=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useAuth","api","usePatientProgress","_s","progressData","setProgressData","loading","setLoading","error","setError","user","mockProgressData","overall","currentProgress","totalSessions","completedSessions","currentPhase","startDate","estimatedEndDate","metrics","energy","current","previous","trend","sleep","digestion","stress","pain","timeline","date","progress","symptoms","name","before","improvement","constitution","vata","balance","pitta","kapha","milestones","id","completed","fetchProgressData","setTimeout","err","message","updateProgressEntry","prev","sort","a","b","Date","getProgressTrend","metric","days","recentData","slice","length","firstValue","lastValue","change","percentChange","getSymptomImprovement","symptomName","symptom","find","s","getCurrentPhaseProgress","phaseRanges","purvakarma","start","end","pradhankarma","paschatkarma","range","phaseProgress","phase","Math","max","min","isComplete","getWeeklyReport","_lastWeek$","_lastWeek","_lastWeek2","_lastWeek$2","lastWeek","averages","forEach","values","map","day","filter","val","undefined","reduce","sum","period","progressGain","getConstitutionBalance","getMilestones","getNextMilestone","m","refetch"],"sources":["C:/Users/Utkarsh/OneDrive/Desktop/AYURSUTRA DRAFT/ayursutra/frontend/src/hooks/usePatientProgress.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport api from '../services/api';\n\nexport const usePatientProgress = () => {\n  const [progressData, setProgressData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { user } = useAuth();\n\n  // Mock progress data for development\n  const mockProgressData = {\n    overall: {\n      currentProgress: 65,\n      totalSessions: 21,\n      completedSessions: 14,\n      currentPhase: 'pradhankarma',\n      startDate: '2024-01-01',\n      estimatedEndDate: '2024-01-28'\n    },\n    metrics: {\n      energy: { current: 9, previous: 6, trend: 'up' },\n      sleep: { current: 9, previous: 7, trend: 'up' },\n      digestion: { current: 9, previous: 5, trend: 'up' },\n      stress: { current: 3, previous: 8, trend: 'down' },\n      pain: { current: 2, previous: 7, trend: 'down' }\n    },\n    timeline: [\n      { date: '2024-01-01', progress: 10, energy: 6, sleep: 7, digestion: 5, stress: 8, pain: 7 },\n      { date: '2024-01-03', progress: 18, energy: 7, sleep: 7, digestion: 6, stress: 7, pain: 6 },\n      { date: '2024-01-05', progress: 25, energy: 7, sleep: 8, digestion: 7, stress: 6, pain: 5 },\n      { date: '2024-01-07', progress: 35, energy: 8, sleep: 8, digestion: 7, stress: 5, pain: 4 },\n      { date: '2024-01-09', progress: 42, energy: 8, sleep: 9, digestion: 8, stress: 4, pain: 3 },\n      { date: '2024-01-11', progress: 50, energy: 9, sleep: 9, digestion: 8, stress: 4, pain: 3 },\n      { date: '2024-01-13', progress: 58, energy: 9, sleep: 8, digestion: 9, stress: 3, pain: 2 },\n      { date: '2024-01-15', progress: 65, energy: 9, sleep: 9, digestion: 9, stress: 3, pain: 2 }\n    ],\n    symptoms: [\n      { name: 'Chronic Fatigue', before: 9, current: 2, improvement: 78 },\n      { name: 'Digestive Issues', before: 7, current: 2, improvement: 71 },\n      { name: 'Sleep Problems', before: 6, current: 1, improvement: 83 },\n      { name: 'Joint Pain', before: 5, current: 1, improvement: 80 },\n      { name: 'Stress & Anxiety', before: 8, current: 3, improvement: 62 }\n    ],\n    constitution: {\n      vata: { balance: 75, trend: 'stable' },\n      pitta: { balance: 85, trend: 'improving' },\n      kapha: { balance: 70, trend: 'improving' }\n    },\n    milestones: [\n      { id: 1, name: 'Treatment Started', date: '2024-01-01', completed: true },\n      { id: 2, name: 'Purvakarma Completed', date: '2024-01-07', completed: true },\n      { id: 3, name: 'Energy Improvement', date: '2024-01-08', completed: true },\n      { id: 4, name: 'Midpoint Reached', date: '2024-01-12', completed: true },\n      { id: 5, name: 'Symptom Relief', date: '2024-01-15', completed: false },\n      { id: 6, name: 'Pradhankarma Complete', date: '2024-01-20', completed: false },\n      { id: 7, name: 'Treatment Complete', date: '2024-01-28', completed: false }\n    ]\n  };\n\n  const fetchProgressData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // In production, this would be actual API calls\n      // const response = await api.get('/patient/progress');\n      // setProgressData(response.data);\n      \n      // For now, use mock data\n      setTimeout(() => {\n        setProgressData(mockProgressData);\n        setLoading(false);\n      }, 800);\n      \n    } catch (err) {\n      setError(err.message || 'Failed to fetch progress data');\n      setLoading(false);\n    }\n  };\n\n  const updateProgressEntry = async (date, metrics) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // const response = await api.post('/patient/progress', { date, ...metrics });\n      \n      // Mock implementation\n      setProgressData(prev => ({\n        ...prev,\n        timeline: [...prev.timeline, { date, ...metrics }].sort((a, b) => new Date(a.date) - new Date(b.date))\n      }));\n      \n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to update progress');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const getProgressTrend = (metric, days = 7) => {\n    if (!progressData?.timeline) return null;\n    \n    const recentData = progressData.timeline.slice(-days);\n    if (recentData.length < 2) return null;\n    \n    const firstValue = recentData[0][metric];\n    const lastValue = recentData[recentData.length - 1][metric];\n    \n    const change = lastValue - firstValue;\n    const percentChange = (change / firstValue) * 100;\n    \n    return {\n      change,\n      percentChange,\n      trend: change > 0 ? 'up' : change < 0 ? 'down' : 'stable'\n    };\n  };\n\n  const getSymptomImprovement = (symptomName) => {\n    if (!progressData?.symptoms) return null;\n    \n    const symptom = progressData.symptoms.find(s => s.name === symptomName);\n    return symptom ? symptom.improvement : null;\n  };\n\n  const getCurrentPhaseProgress = () => {\n    if (!progressData?.overall) return null;\n    \n    const { currentPhase, currentProgress } = progressData.overall;\n    \n    // Calculate phase-specific progress\n    const phaseRanges = {\n      purvakarma: { start: 0, end: 25 },\n      pradhankarma: { start: 25, end: 80 },\n      paschatkarma: { start: 80, end: 100 }\n    };\n    \n    const range = phaseRanges[currentPhase];\n    if (!range) return null;\n    \n    const phaseProgress = ((currentProgress - range.start) / (range.end - range.start)) * 100;\n    \n    return {\n      phase: currentPhase,\n      progress: Math.max(0, Math.min(100, phaseProgress)),\n      isComplete: currentProgress >= range.end\n    };\n  };\n\n  const getWeeklyReport = () => {\n    if (!progressData?.timeline) return null;\n    \n    const lastWeek = progressData.timeline.slice(-7);\n    if (lastWeek.length === 0) return null;\n    \n    const metrics = ['energy', 'sleep', 'digestion', 'stress', 'pain'];\n    const averages = {};\n    \n    metrics.forEach(metric => {\n      const values = lastWeek.map(day => day[metric]).filter(val => val !== undefined);\n      averages[metric] = values.length > 0 \n        ? values.reduce((sum, val) => sum + val, 0) / values.length \n        : 0;\n    });\n    \n    return {\n      period: `${lastWeek[0]?.date} - ${lastWeek[lastWeek.length - 1]?.date}`,\n      averages,\n      totalSessions: lastWeek.length,\n      progressGain: lastWeek[lastWeek.length - 1]?.progress - lastWeek[0]?.progress\n    };\n  };\n\n  const getConstitutionBalance = () => {\n    return progressData?.constitution || null;\n  };\n\n  const getMilestones = () => {\n    return progressData?.milestones || [];\n  };\n\n  const getNextMilestone = () => {\n    if (!progressData?.milestones) return null;\n    return progressData.milestones.find(m => !m.completed);\n  };\n\n  useEffect(() => {\n    if (user) {\n      fetchProgressData();\n    }\n  }, [user]);\n\n  return {\n    progressData,\n    loading,\n    error,\n    updateProgressEntry,\n    getProgressTrend,\n    getSymptomImprovement,\n    getCurrentPhaseProgress,\n    getWeeklyReport,\n    getConstitutionBalance,\n    getMilestones,\n    getNextMilestone,\n    refetch: fetchProgressData\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}