{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nexport const useAppointments = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuth();\n\n  // Mock data for development\n  const mockAppointments = [{\n    id: 1,\n    scheduledDate: '2024-01-15',\n    scheduledTime: '10:00:00',\n    duration: 60,\n    treatmentType: 'abhyanga',\n    status: 'confirmed',\n    practitioner: {\n      id: 1,\n      fullName: 'Priya Sharma'\n    },\n    location: 'Room 101',\n    notes: 'Please arrive 15 minutes early for preparation',\n    isVirtual: false,\n    preparationInstructions: ['Avoid heavy meals 2 hours before treatment', 'Wear comfortable, loose clothing', 'Bring a change of clothes']\n  }, {\n    id: 2,\n    scheduledDate: '2024-01-17',\n    scheduledTime: '14:30:00',\n    duration: 90,\n    treatmentType: 'shirodhara',\n    status: 'confirmed',\n    practitioner: {\n      id: 2,\n      fullName: 'Rajesh Kumar'\n    },\n    location: 'Room 203',\n    notes: 'Stress relief session',\n    isVirtual: false,\n    preparationInstructions: ['Avoid caffeine 4 hours before treatment', 'Come with clean, dry hair', 'Remove all jewelry and accessories']\n  }, {\n    id: 3,\n    scheduledDate: '2024-01-20',\n    scheduledTime: '09:00:00',\n    duration: 45,\n    treatmentType: 'consultation',\n    status: 'pending',\n    practitioner: {\n      id: 1,\n      fullName: 'Priya Sharma'\n    },\n    location: 'Virtual',\n    notes: 'Progress review and treatment plan adjustment',\n    isVirtual: true,\n    preparationInstructions: ['Prepare list of any concerns or questions', 'Have your treatment journal ready', 'Ensure stable internet connection']\n  }];\n  const fetchAppointments = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // In production, this would be an actual API call\n      // const response = await api.get('/appointments');\n      // setAppointments(response.data);\n\n      // For now, use mock data\n      setTimeout(() => {\n        setAppointments(mockAppointments);\n        setLoading(false);\n      }, 1000);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch appointments');\n      setLoading(false);\n    }\n  };\n  const bookAppointment = async appointmentData => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // const response = await api.post('/appointments', appointmentData);\n      // const newAppointment = response.data;\n\n      // Mock implementation\n      const newAppointment = {\n        id: Date.now(),\n        ...appointmentData,\n        status: 'pending',\n        practitioner: {\n          id: 1,\n          fullName: 'Priya Sharma'\n        }\n      };\n      setAppointments(prev => [...prev, newAppointment]);\n      setLoading(false);\n      return newAppointment;\n    } catch (err) {\n      setError(err.message || 'Failed to book appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n  const rescheduleAppointment = async (appointmentId, newDateTime) => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // const response = await api.put(`/appointments/${appointmentId}/reschedule`, {\n      //   scheduledDate: newDateTime.date,\n      //   scheduledTime: newDateTime.time\n      // });\n\n      // Mock implementation\n      setAppointments(prev => prev.map(apt => apt.id === appointmentId ? {\n        ...apt,\n        scheduledDate: (newDateTime === null || newDateTime === void 0 ? void 0 : newDateTime.date) || apt.scheduledDate,\n        scheduledTime: (newDateTime === null || newDateTime === void 0 ? void 0 : newDateTime.time) || apt.scheduledTime,\n        status: 'pending'\n      } : apt));\n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to reschedule appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n  const cancelAppointment = async appointmentId => {\n    try {\n      setLoading(true);\n\n      // In production:\n      // await api.put(`/appointments/${appointmentId}/cancel`);\n\n      // Mock implementation\n      setAppointments(prev => prev.map(apt => apt.id === appointmentId ? {\n        ...apt,\n        status: 'cancelled'\n      } : apt));\n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to cancel appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n  const getUpcomingAppointments = (limit = 5) => {\n    const now = new Date();\n    return appointments.filter(apt => new Date(apt.scheduledDate) >= now && apt.status !== 'cancelled').sort((a, b) => new Date(a.scheduledDate) - new Date(b.scheduledDate)).slice(0, limit);\n  };\n  const getAppointmentsByDateRange = (startDate, endDate) => {\n    return appointments.filter(apt => {\n      const aptDate = new Date(apt.scheduledDate);\n      return aptDate >= startDate && aptDate <= endDate;\n    });\n  };\n  const getTodaysAppointments = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return appointments.filter(apt => apt.scheduledDate === today && apt.status !== 'cancelled');\n  };\n  useEffect(() => {\n    if (user) {\n      fetchAppointments();\n    }\n  }, [user]);\n  return {\n    appointments,\n    loading,\n    error,\n    bookAppointment,\n    rescheduleAppointment,\n    cancelAppointment,\n    getUpcomingAppointments,\n    getAppointmentsByDateRange,\n    getTodaysAppointments,\n    refetch: fetchAppointments\n  };\n};\n_s(useAppointments, \"DENyoAlus7WUzAmSPYtcC7HSrys=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useAuth","useAppointments","_s","appointments","setAppointments","loading","setLoading","error","setError","user","mockAppointments","id","scheduledDate","scheduledTime","duration","treatmentType","status","practitioner","fullName","location","notes","isVirtual","preparationInstructions","fetchAppointments","setTimeout","err","message","bookAppointment","appointmentData","newAppointment","Date","now","prev","rescheduleAppointment","appointmentId","newDateTime","map","apt","date","time","cancelAppointment","getUpcomingAppointments","limit","filter","sort","a","b","slice","getAppointmentsByDateRange","startDate","endDate","aptDate","getTodaysAppointments","today","toISOString","split","refetch"],"sources":["C:/Users/Utkarsh/OneDrive/Desktop/AYURSUTRA DRAFT/ayursutra/frontend/src/hooks/useAppointments.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport const useAppointments = () => {\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { user } = useAuth();\n\n  // Mock data for development\n  const mockAppointments = [\n    {\n      id: 1,\n      scheduledDate: '2024-01-15',\n      scheduledTime: '10:00:00',\n      duration: 60,\n      treatmentType: 'abhyanga',\n      status: 'confirmed',\n      practitioner: {\n        id: 1,\n        fullName: 'Priya Sharma'\n      },\n      location: 'Room 101',\n      notes: 'Please arrive 15 minutes early for preparation',\n      isVirtual: false,\n      preparationInstructions: [\n        'Avoid heavy meals 2 hours before treatment',\n        'Wear comfortable, loose clothing',\n        'Bring a change of clothes'\n      ]\n    },\n    {\n      id: 2,\n      scheduledDate: '2024-01-17',\n      scheduledTime: '14:30:00',\n      duration: 90,\n      treatmentType: 'shirodhara',\n      status: 'confirmed',\n      practitioner: {\n        id: 2,\n        fullName: 'Rajesh Kumar'\n      },\n      location: 'Room 203',\n      notes: 'Stress relief session',\n      isVirtual: false,\n      preparationInstructions: [\n        'Avoid caffeine 4 hours before treatment',\n        'Come with clean, dry hair',\n        'Remove all jewelry and accessories'\n      ]\n    },\n    {\n      id: 3,\n      scheduledDate: '2024-01-20',\n      scheduledTime: '09:00:00',\n      duration: 45,\n      treatmentType: 'consultation',\n      status: 'pending',\n      practitioner: {\n        id: 1,\n        fullName: 'Priya Sharma'\n      },\n      location: 'Virtual',\n      notes: 'Progress review and treatment plan adjustment',\n      isVirtual: true,\n      preparationInstructions: [\n        'Prepare list of any concerns or questions',\n        'Have your treatment journal ready',\n        'Ensure stable internet connection'\n      ]\n    }\n  ];\n\n  const fetchAppointments = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // In production, this would be an actual API call\n      // const response = await api.get('/appointments');\n      // setAppointments(response.data);\n      \n      // For now, use mock data\n      setTimeout(() => {\n        setAppointments(mockAppointments);\n        setLoading(false);\n      }, 1000);\n      \n    } catch (err) {\n      setError(err.message || 'Failed to fetch appointments');\n      setLoading(false);\n    }\n  };\n\n  const bookAppointment = async (appointmentData) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // const response = await api.post('/appointments', appointmentData);\n      // const newAppointment = response.data;\n      \n      // Mock implementation\n      const newAppointment = {\n        id: Date.now(),\n        ...appointmentData,\n        status: 'pending',\n        practitioner: {\n          id: 1,\n          fullName: 'Priya Sharma'\n        }\n      };\n      \n      setAppointments(prev => [...prev, newAppointment]);\n      setLoading(false);\n      \n      return newAppointment;\n    } catch (err) {\n      setError(err.message || 'Failed to book appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const rescheduleAppointment = async (appointmentId, newDateTime) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // const response = await api.put(`/appointments/${appointmentId}/reschedule`, {\n      //   scheduledDate: newDateTime.date,\n      //   scheduledTime: newDateTime.time\n      // });\n      \n      // Mock implementation\n      setAppointments(prev => \n        prev.map(apt => \n          apt.id === appointmentId \n            ? { \n                ...apt, \n                scheduledDate: newDateTime?.date || apt.scheduledDate,\n                scheduledTime: newDateTime?.time || apt.scheduledTime,\n                status: 'pending'\n              }\n            : apt\n        )\n      );\n      \n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to reschedule appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const cancelAppointment = async (appointmentId) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // await api.put(`/appointments/${appointmentId}/cancel`);\n      \n      // Mock implementation\n      setAppointments(prev => \n        prev.map(apt => \n          apt.id === appointmentId \n            ? { ...apt, status: 'cancelled' }\n            : apt\n        )\n      );\n      \n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to cancel appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const getUpcomingAppointments = (limit = 5) => {\n    const now = new Date();\n    return appointments\n      .filter(apt => new Date(apt.scheduledDate) >= now && apt.status !== 'cancelled')\n      .sort((a, b) => new Date(a.scheduledDate) - new Date(b.scheduledDate))\n      .slice(0, limit);\n  };\n\n  const getAppointmentsByDateRange = (startDate, endDate) => {\n    return appointments.filter(apt => {\n      const aptDate = new Date(apt.scheduledDate);\n      return aptDate >= startDate && aptDate <= endDate;\n    });\n  };\n\n  const getTodaysAppointments = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return appointments.filter(apt => \n      apt.scheduledDate === today && apt.status !== 'cancelled'\n    );\n  };\n\n  useEffect(() => {\n    if (user) {\n      fetchAppointments();\n    }\n  }, [user]);\n\n  return {\n    appointments,\n    loading,\n    error,\n    bookAppointment,\n    rescheduleAppointment,\n    cancelAppointment,\n    getUpcomingAppointments,\n    getAppointmentsByDateRange,\n    getTodaysAppointments,\n    refetch: fetchAppointments\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}