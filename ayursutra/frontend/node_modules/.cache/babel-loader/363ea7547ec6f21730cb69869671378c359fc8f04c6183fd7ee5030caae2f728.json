{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utkarsh\\\\OneDrive\\\\Desktop\\\\AYURSUTRA DRAFT\\\\ayursutra\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored auth data on app load\n    const storedToken = localStorage.getItem('authToken');\n    const storedUser = localStorage.getItem('authUser');\n    if (storedToken && storedUser) {\n      setToken(storedToken);\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setUser(data.user);\n        setToken(data.token);\n        localStorage.setItem('authToken', data.token);\n        localStorage.setItem('authUser', JSON.stringify(data.user));\n        if (data.refreshToken) {\n          localStorage.setItem('refreshToken', data.refreshToken);\n        }\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error. Please try again.'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      const data = await response.json();\n      if (data.success) {\n        setUser(data.user);\n        setToken(data.token);\n        localStorage.setItem('authToken', data.token);\n        localStorage.setItem('authUser', JSON.stringify(data.user));\n        if (data.refreshToken) {\n          localStorage.setItem('refreshToken', data.refreshToken);\n        }\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error. Please try again.'\n      };\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(profileData)\n      });\n      const data = await response.json();\n      if (data.success) {\n        const updatedUser = {\n          ...user,\n          ...data.user\n        };\n        setUser(updatedUser);\n        localStorage.setItem('authUser', JSON.stringify(updatedUser));\n        return {\n          success: true,\n          user: updatedUser\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Network error. Please try again.'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('authUser');\n    localStorage.removeItem('refreshToken');\n  };\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    updateProfile,\n    logout,\n    loading,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"uAkFQMmIUxfxJcQTEb8tCM/KFt4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","loading","setLoading","storedToken","localStorage","getItem","storedUser","JSON","parse","login","email","password","response","fetch","method","headers","body","stringify","data","json","success","setItem","refreshToken","message","error","register","userData","updateProfile","profileData","updatedUser","logout","removeItem","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Utkarsh/OneDrive/Desktop/AYURSUTRA DRAFT/ayursutra/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for stored auth data on app load\n    const storedToken = localStorage.getItem('authToken');\n    const storedUser = localStorage.getItem('authUser');\n    \n    if (storedToken && storedUser) {\n      setToken(storedToken);\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setUser(data.user);\n        setToken(data.token);\n        localStorage.setItem('authToken', data.token);\n        localStorage.setItem('authUser', JSON.stringify(data.user));\n        if (data.refreshToken) {\n          localStorage.setItem('refreshToken', data.refreshToken);\n        }\n        return { success: true, user: data.user };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error. Please try again.' };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setUser(data.user);\n        setToken(data.token);\n        localStorage.setItem('authToken', data.token);\n        localStorage.setItem('authUser', JSON.stringify(data.user));\n        if (data.refreshToken) {\n          localStorage.setItem('refreshToken', data.refreshToken);\n        }\n        return { success: true, user: data.user };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error. Please try again.' };\n    }\n  };\n\n  const updateProfile = async (profileData) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(profileData),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        const updatedUser = { ...user, ...data.user };\n        setUser(updatedUser);\n        localStorage.setItem('authUser', JSON.stringify(updatedUser));\n        return { success: true, user: updatedUser };\n      } else {\n        return { success: false, message: data.message };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error. Please try again.' };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('authUser');\n    localStorage.removeItem('refreshToken');\n  };\n\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    updateProfile,\n    logout,\n    loading,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}