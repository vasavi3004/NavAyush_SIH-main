{"ast":null,"code":"import _objectSpread from\"R:/NavAyush_SIH-main/ayursutra/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from'react';import{useAuth}from'../contexts/AuthContext';import api from'../services/api';export const useNotifications=()=>{const[notifications,setNotifications]=useState([]);const[unreadCount,setUnreadCount]=useState(0);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const{user}=useAuth();// Mock notifications for development\nconst mockNotifications=[{id:1,title:'Appointment Reminder',message:'Your Abhyanga session is scheduled for tomorrow at 10:00 AM',type:'appointment',isRead:false,createdAt:'2025-01-14T18:00:00Z',actionUrl:'/appointments/1'},{id:2,title:'Treatment Progress',message:'Congratulations! You have completed 65% of your Panchakarma treatment',type:'success',isRead:false,createdAt:'2025-01-14T12:00:00Z',actionUrl:'/progress'},{id:3,title:'Dietary Guidelines',message:'New dietary recommendations have been added to your treatment plan',type:'info',isRead:true,createdAt:'2025-01-13T15:30:00Z',actionUrl:'/diet-plan'},{id:4,title:'Preparation Reminder',message:'Please avoid heavy meals 2 hours before your Shirodhara session',type:'reminder',isRead:false,createdAt:'2025-01-13T09:00:00Z',actionUrl:'/appointments/2'},{id:5,title:'Milestone Achievement',message:'You have reached the midpoint of your treatment journey!',type:'success',isRead:true,createdAt:'2025-01-12T16:45:00Z',actionUrl:'/milestones'},{id:6,title:'Session Feedback',message:'Please provide feedback for your recent Abhyanga session',type:'info',isRead:true,createdAt:'2025-01-11T20:00:00Z',actionUrl:'/feedback/1'}];const fetchNotifications=async()=>{try{setLoading(true);setError(null);// In production, this would be actual API calls\n// const response = await api.get('/notifications');\n// setNotifications(response.data);\n// For now, use mock data\nsetTimeout(()=>{setNotifications(mockNotifications);const unread=mockNotifications.filter(n=>!n.isRead).length;setUnreadCount(unread);setLoading(false);},500);}catch(err){setError(err.message||'Failed to fetch notifications');setLoading(false);}};const markAsRead=async notificationId=>{try{// In production:\n// await api.put(`/notifications/${notificationId}/read`);\n// Mock implementation\nsetNotifications(prev=>prev.map(notification=>notification.id===notificationId?_objectSpread(_objectSpread({},notification),{},{isRead:true}):notification));setUnreadCount(prev=>Math.max(0,prev-1));}catch(err){setError(err.message||'Failed to mark notification as read');throw err;}};const markAllAsRead=async()=>{try{// In production:\n// await api.put('/notifications/mark-all-read');\n// Mock implementation\nsetNotifications(prev=>prev.map(notification=>_objectSpread(_objectSpread({},notification),{},{isRead:true})));setUnreadCount(0);}catch(err){setError(err.message||'Failed to mark all notifications as read');throw err;}};const deleteNotification=async notificationId=>{try{// In production:\n// await api.delete(`/notifications/${notificationId}`);\n// Mock implementation\nconst notification=notifications.find(n=>n.id===notificationId);setNotifications(prev=>prev.filter(n=>n.id!==notificationId));if(notification&&!notification.isRead){setUnreadCount(prev=>Math.max(0,prev-1));}}catch(err){setError(err.message||'Failed to delete notification');throw err;}};const sendNotification=async notificationData=>{try{// In production:\n// const response = await api.post('/notifications', notificationData);\n// const newNotification = response.data;\n// Mock implementation\nconst newNotification=_objectSpread(_objectSpread({id:Date.now()},notificationData),{},{isRead:false,createdAt:new Date().toISOString()});setNotifications(prev=>[newNotification,...prev]);setUnreadCount(prev=>prev+1);return newNotification;}catch(err){setError(err.message||'Failed to send notification');throw err;}};const getNotificationsByType=type=>{return notifications.filter(notification=>notification.type===type);};const getUnreadNotifications=()=>{return notifications.filter(notification=>!notification.isRead);};const getRecentNotifications=function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;return notifications.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt)).slice(0,limit);};// WebSocket connection for real-time notifications (mock implementation)\nuseEffect(()=>{if(!user)return;// In production, this would establish a WebSocket connection\n// const ws = new WebSocket(`ws://localhost:3001/notifications?userId=${user.id}`);\n// \n// ws.onmessage = (event) => {\n//   const notification = JSON.parse(event.data);\n//   setNotifications(prev => [notification, ...prev]);\n//   setUnreadCount(prev => prev + 1);\n// };\n// \n// return () => ws.close();\n// Mock real-time notification simulation\nconst interval=setInterval(()=>{// Randomly add a new notification (for demo purposes)\nif(Math.random()<0.1){// 10% chance every 30 seconds\nconst mockNewNotification={id:Date.now(),title:'New Update',message:'You have a new update in your treatment plan',type:'info',isRead:false,createdAt:new Date().toISOString(),actionUrl:'/dashboard'};setNotifications(prev=>[mockNewNotification,...prev]);setUnreadCount(prev=>prev+1);}},30000);// Check every 30 seconds\nreturn()=>clearInterval(interval);},[user]);useEffect(()=>{if(user){fetchNotifications();}},[user]);return{notifications,unreadCount,loading,error,markAsRead,markAllAsRead,deleteNotification,sendNotification,getNotificationsByType,getUnreadNotifications,getRecentNotifications,refetch:fetchNotifications};};","map":{"version":3,"names":["useState","useEffect","useAuth","api","useNotifications","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","error","setError","user","mockNotifications","id","title","message","type","isRead","createdAt","actionUrl","fetchNotifications","setTimeout","unread","filter","n","length","err","markAsRead","notificationId","prev","map","notification","_objectSpread","Math","max","markAllAsRead","deleteNotification","find","sendNotification","notificationData","newNotification","Date","now","toISOString","getNotificationsByType","getUnreadNotifications","getRecentNotifications","limit","arguments","undefined","sort","a","b","slice","interval","setInterval","random","mockNewNotification","clearInterval","refetch"],"sources":["R:/NavAyush_SIH-main/ayursutra/frontend/src/hooks/useNotifications.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport api from '../services/api';\r\n\r\nexport const useNotifications = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const { user } = useAuth();\r\n\r\n  // Mock notifications for development\r\n  const mockNotifications = [\r\n    {\r\n      id: 1,\r\n      title: 'Appointment Reminder',\r\n      message: 'Your Abhyanga session is scheduled for tomorrow at 10:00 AM',\r\n      type: 'appointment',\r\n      isRead: false,\r\n      createdAt: '2025-01-14T18:00:00Z',\r\n      actionUrl: '/appointments/1'\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Treatment Progress',\r\n      message: 'Congratulations! You have completed 65% of your Panchakarma treatment',\r\n      type: 'success',\r\n      isRead: false,\r\n      createdAt: '2025-01-14T12:00:00Z',\r\n      actionUrl: '/progress'\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'Dietary Guidelines',\r\n      message: 'New dietary recommendations have been added to your treatment plan',\r\n      type: 'info',\r\n      isRead: true,\r\n      createdAt: '2025-01-13T15:30:00Z',\r\n      actionUrl: '/diet-plan'\r\n    },\r\n    {\r\n      id: 4,\r\n      title: 'Preparation Reminder',\r\n      message: 'Please avoid heavy meals 2 hours before your Shirodhara session',\r\n      type: 'reminder',\r\n      isRead: false,\r\n      createdAt: '2025-01-13T09:00:00Z',\r\n      actionUrl: '/appointments/2'\r\n    },\r\n    {\r\n      id: 5,\r\n      title: 'Milestone Achievement',\r\n      message: 'You have reached the midpoint of your treatment journey!',\r\n      type: 'success',\r\n      isRead: true,\r\n      createdAt: '2025-01-12T16:45:00Z',\r\n      actionUrl: '/milestones'\r\n    },\r\n    {\r\n      id: 6,\r\n      title: 'Session Feedback',\r\n      message: 'Please provide feedback for your recent Abhyanga session',\r\n      type: 'info',\r\n      isRead: true,\r\n      createdAt: '2025-01-11T20:00:00Z',\r\n      actionUrl: '/feedback/1'\r\n    }\r\n  ];\r\n\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // In production, this would be actual API calls\r\n      // const response = await api.get('/notifications');\r\n      // setNotifications(response.data);\r\n      \r\n      // For now, use mock data\r\n      setTimeout(() => {\r\n        setNotifications(mockNotifications);\r\n        const unread = mockNotifications.filter(n => !n.isRead).length;\r\n        setUnreadCount(unread);\r\n        setLoading(false);\r\n      }, 500);\r\n      \r\n    } catch (err) {\r\n      setError(err.message || 'Failed to fetch notifications');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      // In production:\r\n      // await api.put(`/notifications/${notificationId}/read`);\r\n      \r\n      // Mock implementation\r\n      setNotifications(prev => \r\n        prev.map(notification => \r\n          notification.id === notificationId \r\n            ? { ...notification, isRead: true }\r\n            : notification\r\n        )\r\n      );\r\n      \r\n      setUnreadCount(prev => Math.max(0, prev - 1));\r\n      \r\n    } catch (err) {\r\n      setError(err.message || 'Failed to mark notification as read');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      // In production:\r\n      // await api.put('/notifications/mark-all-read');\r\n      \r\n      // Mock implementation\r\n      setNotifications(prev => \r\n        prev.map(notification => ({ ...notification, isRead: true }))\r\n      );\r\n      \r\n      setUnreadCount(0);\r\n      \r\n    } catch (err) {\r\n      setError(err.message || 'Failed to mark all notifications as read');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const deleteNotification = async (notificationId) => {\r\n    try {\r\n      // In production:\r\n      // await api.delete(`/notifications/${notificationId}`);\r\n      \r\n      // Mock implementation\r\n      const notification = notifications.find(n => n.id === notificationId);\r\n      setNotifications(prev => prev.filter(n => n.id !== notificationId));\r\n      \r\n      if (notification && !notification.isRead) {\r\n        setUnreadCount(prev => Math.max(0, prev - 1));\r\n      }\r\n      \r\n    } catch (err) {\r\n      setError(err.message || 'Failed to delete notification');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const sendNotification = async (notificationData) => {\r\n    try {\r\n      // In production:\r\n      // const response = await api.post('/notifications', notificationData);\r\n      // const newNotification = response.data;\r\n      \r\n      // Mock implementation\r\n      const newNotification = {\r\n        id: Date.now(),\r\n        ...notificationData,\r\n        isRead: false,\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      setNotifications(prev => [newNotification, ...prev]);\r\n      setUnreadCount(prev => prev + 1);\r\n      \r\n      return newNotification;\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to send notification');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const getNotificationsByType = (type) => {\r\n    return notifications.filter(notification => notification.type === type);\r\n  };\r\n\r\n  const getUnreadNotifications = () => {\r\n    return notifications.filter(notification => !notification.isRead);\r\n  };\r\n\r\n  const getRecentNotifications = (limit = 5) => {\r\n    return notifications\r\n      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n      .slice(0, limit);\r\n  };\r\n\r\n  // WebSocket connection for real-time notifications (mock implementation)\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    // In production, this would establish a WebSocket connection\r\n    // const ws = new WebSocket(`ws://localhost:3001/notifications?userId=${user.id}`);\r\n    // \r\n    // ws.onmessage = (event) => {\r\n    //   const notification = JSON.parse(event.data);\r\n    //   setNotifications(prev => [notification, ...prev]);\r\n    //   setUnreadCount(prev => prev + 1);\r\n    // };\r\n    // \r\n    // return () => ws.close();\r\n\r\n    // Mock real-time notification simulation\r\n    const interval = setInterval(() => {\r\n      // Randomly add a new notification (for demo purposes)\r\n      if (Math.random() < 0.1) { // 10% chance every 30 seconds\r\n        const mockNewNotification = {\r\n          id: Date.now(),\r\n          title: 'New Update',\r\n          message: 'You have a new update in your treatment plan',\r\n          type: 'info',\r\n          isRead: false,\r\n          createdAt: new Date().toISOString(),\r\n          actionUrl: '/dashboard'\r\n        };\r\n        \r\n        setNotifications(prev => [mockNewNotification, ...prev]);\r\n        setUnreadCount(prev => prev + 1);\r\n      }\r\n    }, 30000); // Check every 30 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchNotifications();\r\n    }\r\n  }, [user]);\r\n\r\n  return {\r\n    notifications,\r\n    unreadCount,\r\n    loading,\r\n    error,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    deleteNotification,\r\n    sendNotification,\r\n    getNotificationsByType,\r\n    getUnreadNotifications,\r\n    getRecentNotifications,\r\n    refetch: fetchNotifications\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}