{"ast":null,"code":"import _objectSpread from\"R:/NavAyush_SIH-main/NavAyush_SIH-main/ayursutra/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from'react';export const usePatientManagement=()=>{const[patients,setPatients]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Mock patients data\nconst mockPatients=[{id:'P001',name:'Rajesh Kumar',age:45,gender:'Male',phone:'+91 98765 43210',email:'rajesh.kumar@email.com',constitution:'Vata-Pitta',lastVisit:'2025-01-15',status:'Active',nextAppointment:'2025-01-22'},{id:'P002',name:'Priya Sharma',age:32,gender:'Female',phone:'+91 87654 32109',email:'priya.sharma@email.com',constitution:'Pitta-Kapha',lastVisit:'2025-01-18',status:'Active',nextAppointment:'2025-01-25'},{id:'P003',name:'Amit Patel',age:38,gender:'Male',phone:'+91 76543 21098',email:'amit.patel@email.com',constitution:'Kapha-Vata',lastVisit:'2025-01-10',status:'Completed',nextAppointment:null}];useEffect(()=>{// Simulate API call\nconst fetchPatients=async()=>{try{setLoading(true);// Simulate network delay\nawait new Promise(resolve=>setTimeout(resolve,1000));setPatients(mockPatients);setError(null);}catch(err){setError('Failed to fetch patients');}finally{setLoading(false);}};fetchPatients();},[]);const addPatient=patientData=>{const newPatient=_objectSpread(_objectSpread({id:\"P\".concat(String(patients.length+1).padStart(3,'0'))},patientData),{},{status:'Active'});setPatients(prev=>[...prev,newPatient]);return newPatient;};const updatePatient=(patientId,updates)=>{setPatients(prev=>prev.map(patient=>patient.id===patientId?_objectSpread(_objectSpread({},patient),updates):patient));};const deletePatient=patientId=>{setPatients(prev=>prev.filter(patient=>patient.id!==patientId));};const searchPatients=query=>{if(!query)return patients;return patients.filter(patient=>patient.name.toLowerCase().includes(query.toLowerCase())||patient.email.toLowerCase().includes(query.toLowerCase())||patient.phone.includes(query)||patient.id.toLowerCase().includes(query.toLowerCase()));};return{patients,loading,error,addPatient,updatePatient,deletePatient,searchPatients};};","map":{"version":3,"names":["useState","useEffect","usePatientManagement","patients","setPatients","loading","setLoading","error","setError","mockPatients","id","name","age","gender","phone","email","constitution","lastVisit","status","nextAppointment","fetchPatients","Promise","resolve","setTimeout","err","addPatient","patientData","newPatient","_objectSpread","concat","String","length","padStart","prev","updatePatient","patientId","updates","map","patient","deletePatient","filter","searchPatients","query","toLowerCase","includes"],"sources":["R:/NavAyush_SIH-main/NavAyush_SIH-main/ayursutra/frontend/src/hooks/usePatientManagement.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const usePatientManagement = () => {\r\n  const [patients, setPatients] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Mock patients data\r\n  const mockPatients = [\r\n    {\r\n      id: 'P001',\r\n      name: 'Rajesh Kumar',\r\n      age: 45,\r\n      gender: 'Male',\r\n      phone: '+91 98765 43210',\r\n      email: 'rajesh.kumar@email.com',\r\n      constitution: 'Vata-Pitta',\r\n      lastVisit: '2025-01-15',\r\n      status: 'Active',\r\n      nextAppointment: '2025-01-22'\r\n    },\r\n    {\r\n      id: 'P002',\r\n      name: 'Priya Sharma',\r\n      age: 32,\r\n      gender: 'Female',\r\n      phone: '+91 87654 32109',\r\n      email: 'priya.sharma@email.com',\r\n      constitution: 'Pitta-Kapha',\r\n      lastVisit: '2025-01-18',\r\n      status: 'Active',\r\n      nextAppointment: '2025-01-25'\r\n    },\r\n    {\r\n      id: 'P003',\r\n      name: 'Amit Patel',\r\n      age: 38,\r\n      gender: 'Male',\r\n      phone: '+91 76543 21098',\r\n      email: 'amit.patel@email.com',\r\n      constitution: 'Kapha-Vata',\r\n      lastVisit: '2025-01-10',\r\n      status: 'Completed',\r\n      nextAppointment: null\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Simulate API call\r\n    const fetchPatients = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Simulate network delay\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        setPatients(mockPatients);\r\n        setError(null);\r\n      } catch (err) {\r\n        setError('Failed to fetch patients');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPatients();\r\n  }, []);\r\n\r\n  const addPatient = (patientData) => {\r\n    const newPatient = {\r\n      id: `P${String(patients.length + 1).padStart(3, '0')}`,\r\n      ...patientData,\r\n      status: 'Active'\r\n    };\r\n    setPatients(prev => [...prev, newPatient]);\r\n    return newPatient;\r\n  };\r\n\r\n  const updatePatient = (patientId, updates) => {\r\n    setPatients(prev => \r\n      prev.map(patient => \r\n        patient.id === patientId \r\n          ? { ...patient, ...updates }\r\n          : patient\r\n      )\r\n    );\r\n  };\r\n\r\n  const deletePatient = (patientId) => {\r\n    setPatients(prev => prev.filter(patient => patient.id !== patientId));\r\n  };\r\n\r\n  const searchPatients = (query) => {\r\n    if (!query) return patients;\r\n    \r\n    return patients.filter(patient =>\r\n      patient.name.toLowerCase().includes(query.toLowerCase()) ||\r\n      patient.email.toLowerCase().includes(query.toLowerCase()) ||\r\n      patient.phone.includes(query) ||\r\n      patient.id.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n  };\r\n\r\n  return {\r\n    patients,\r\n    loading,\r\n    error,\r\n    addPatient,\r\n    updatePatient,\r\n    deletePatient,\r\n    searchPatients\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}