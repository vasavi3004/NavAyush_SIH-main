{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:5000/api'}/auth/refresh`, {\n          refreshToken\n        });\n        const {\n          token\n        } = response.data;\n        localStorage.setItem('authToken', token);\n\n        // Retry the original request with new token\n        originalRequest.headers.Authorization = `Bearer ${token}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh failed, redirect to login\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('authUser');\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// API methods\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  logout: () => api.post('/auth/logout'),\n  refreshToken: refreshToken => api.post('/auth/refresh', {\n    refreshToken\n  }),\n  getCurrentUser: () => api.get('/auth/me'),\n  forgotPassword: email => api.post('/auth/forgot-password', {\n    email\n  }),\n  resetPassword: (token, password) => api.post('/auth/reset-password', {\n    token,\n    password\n  })\n};\nexport const appointmentAPI = {\n  getAll: () => api.get('/appointments'),\n  getById: id => api.get(`/appointments/${id}`),\n  create: appointmentData => api.post('/appointments', appointmentData),\n  update: (id, appointmentData) => api.put(`/appointments/${id}`, appointmentData),\n  cancel: id => api.put(`/appointments/${id}/cancel`),\n  reschedule: (id, newDateTime) => api.put(`/appointments/${id}/reschedule`, newDateTime),\n  getAvailableSlots: (practitionerId, date) => api.get(`/appointments/available-slots?practitionerId=${practitionerId}&date=${date}`)\n};\nexport const patientAPI = {\n  getProfile: () => api.get('/patient/profile'),\n  updateProfile: profileData => api.put('/patient/profile', profileData),\n  getProgress: () => api.get('/patient/progress'),\n  updateProgress: progressData => api.post('/patient/progress', progressData),\n  getTreatmentPlan: () => api.get('/patient/treatment-plan'),\n  getMedicalHistory: () => api.get('/patient/medical-history')\n};\nexport const practitionerAPI = {\n  getAll: () => api.get('/practitioners'),\n  getById: id => api.get(`/practitioners/${id}`),\n  getAvailability: (id, date) => api.get(`/practitioners/${id}/availability?date=${date}`),\n  getSpecializations: () => api.get('/practitioners/specializations')\n};\nexport const treatmentAPI = {\n  getAll: () => api.get('/treatments'),\n  getById: id => api.get(`/treatments/${id}`),\n  getByType: type => api.get(`/treatments?type=${type}`),\n  getProtocols: () => api.get('/treatments/protocols')\n};\nexport const notificationAPI = {\n  getAll: () => api.get('/notifications'),\n  markAsRead: id => api.put(`/notifications/${id}/read`),\n  markAllAsRead: () => api.put('/notifications/mark-all-read'),\n  delete: id => api.delete(`/notifications/${id}`),\n  getUnreadCount: () => api.get('/notifications/unread-count')\n};\nexport const aiSchedulingAPI = {\n  scheduleAppointment: appointmentRequest => api.post('/ai-scheduling/schedule', appointmentRequest),\n  getOptimalSlots: params => api.get('/ai-scheduling/optimal-slots', {\n    params\n  }),\n  rescheduleAppointment: (appointmentId, preferences) => api.put(`/ai-scheduling/reschedule/${appointmentId}`, preferences),\n  getInsights: (practitionerId, dateRange) => api.get(`/ai-scheduling/insights/${practitionerId}`, {\n    params: dateRange\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","data","setItem","refreshError","removeItem","window","location","href","authAPI","login","credentials","register","userData","logout","getCurrentUser","get","forgotPassword","email","resetPassword","password","appointmentAPI","getAll","getById","id","appointmentData","update","put","cancel","reschedule","newDateTime","getAvailableSlots","practitionerId","date","patientAPI","getProfile","updateProfile","profileData","getProgress","updateProgress","progressData","getTreatmentPlan","getMedicalHistory","practitionerAPI","getAvailability","getSpecializations","treatmentAPI","getByType","type","getProtocols","notificationAPI","markAsRead","markAllAsRead","delete","getUnreadCount","aiSchedulingAPI","scheduleAppointment","appointmentRequest","getOptimalSlots","params","rescheduleAppointment","appointmentId","preferences","getInsights","dateRange"],"sources":["C:/Users/Utkarsh/OneDrive/Desktop/AYURSUTRA DRAFT/ayursutra/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (refreshToken) {\n          const response = await axios.post(\n            `${process.env.REACT_APP_API_URL || 'http://localhost:5000/api'}/auth/refresh`,\n            { refreshToken }\n          );\n\n          const { token } = response.data;\n          localStorage.setItem('authToken', token);\n\n          // Retry the original request with new token\n          originalRequest.headers.Authorization = `Bearer ${token}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh failed, redirect to login\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('authUser');\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// API methods\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  logout: () => api.post('/auth/logout'),\n  refreshToken: (refreshToken) => api.post('/auth/refresh', { refreshToken }),\n  getCurrentUser: () => api.get('/auth/me'),\n  forgotPassword: (email) => api.post('/auth/forgot-password', { email }),\n  resetPassword: (token, password) => api.post('/auth/reset-password', { token, password }),\n};\n\nexport const appointmentAPI = {\n  getAll: () => api.get('/appointments'),\n  getById: (id) => api.get(`/appointments/${id}`),\n  create: (appointmentData) => api.post('/appointments', appointmentData),\n  update: (id, appointmentData) => api.put(`/appointments/${id}`, appointmentData),\n  cancel: (id) => api.put(`/appointments/${id}/cancel`),\n  reschedule: (id, newDateTime) => api.put(`/appointments/${id}/reschedule`, newDateTime),\n  getAvailableSlots: (practitionerId, date) => api.get(`/appointments/available-slots?practitionerId=${practitionerId}&date=${date}`),\n};\n\nexport const patientAPI = {\n  getProfile: () => api.get('/patient/profile'),\n  updateProfile: (profileData) => api.put('/patient/profile', profileData),\n  getProgress: () => api.get('/patient/progress'),\n  updateProgress: (progressData) => api.post('/patient/progress', progressData),\n  getTreatmentPlan: () => api.get('/patient/treatment-plan'),\n  getMedicalHistory: () => api.get('/patient/medical-history'),\n};\n\nexport const practitionerAPI = {\n  getAll: () => api.get('/practitioners'),\n  getById: (id) => api.get(`/practitioners/${id}`),\n  getAvailability: (id, date) => api.get(`/practitioners/${id}/availability?date=${date}`),\n  getSpecializations: () => api.get('/practitioners/specializations'),\n};\n\nexport const treatmentAPI = {\n  getAll: () => api.get('/treatments'),\n  getById: (id) => api.get(`/treatments/${id}`),\n  getByType: (type) => api.get(`/treatments?type=${type}`),\n  getProtocols: () => api.get('/treatments/protocols'),\n};\n\nexport const notificationAPI = {\n  getAll: () => api.get('/notifications'),\n  markAsRead: (id) => api.put(`/notifications/${id}/read`),\n  markAllAsRead: () => api.put('/notifications/mark-all-read'),\n  delete: (id) => api.delete(`/notifications/${id}`),\n  getUnreadCount: () => api.get('/notifications/unread-count'),\n};\n\nexport const aiSchedulingAPI = {\n  scheduleAppointment: (appointmentRequest) => api.post('/ai-scheduling/schedule', appointmentRequest),\n  getOptimalSlots: (params) => api.get('/ai-scheduling/optimal-slots', { params }),\n  rescheduleAppointment: (appointmentId, preferences) => api.put(`/ai-scheduling/reschedule/${appointmentId}`, preferences),\n  getInsights: (practitionerId, dateRange) => api.get(`/ai-scheduling/insights/${practitionerId}`, { params: dateRange }),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}