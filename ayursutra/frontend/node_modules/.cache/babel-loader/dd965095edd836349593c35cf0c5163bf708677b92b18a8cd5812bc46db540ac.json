{"ast":null,"code":"import _objectSpread from\"C:/Users/Utkarsh/OneDrive/Desktop/AYURSUTRA DRAFT/ayursutra/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from'react';import{useAuth}from'../contexts/AuthContext';export const useAppointments=()=>{const[appointments,setAppointments]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const{user}=useAuth();// Mock data for development\nconst mockAppointments=[{id:1,scheduledDate:'2024-01-15',scheduledTime:'10:00:00',duration:60,treatmentType:'abhyanga',status:'confirmed',practitioner:{id:1,fullName:'Priya Sharma'},location:'Room 101',notes:'Please arrive 15 minutes early for preparation',isVirtual:false,preparationInstructions:['Avoid heavy meals 2 hours before treatment','Wear comfortable, loose clothing','Bring a change of clothes']},{id:2,scheduledDate:'2024-01-17',scheduledTime:'14:30:00',duration:90,treatmentType:'shirodhara',status:'confirmed',practitioner:{id:2,fullName:'Rajesh Kumar'},location:'Room 203',notes:'Stress relief session',isVirtual:false,preparationInstructions:['Avoid caffeine 4 hours before treatment','Come with clean, dry hair','Remove all jewelry and accessories']},{id:3,scheduledDate:'2024-01-20',scheduledTime:'09:00:00',duration:45,treatmentType:'consultation',status:'pending',practitioner:{id:1,fullName:'Priya Sharma'},location:'Virtual',notes:'Progress review and treatment plan adjustment',isVirtual:true,preparationInstructions:['Prepare list of any concerns or questions','Have your treatment journal ready','Ensure stable internet connection']}];const fetchAppointments=async()=>{try{setLoading(true);setError(null);// In production, this would be an actual API call\n// const response = await api.get('/appointments');\n// setAppointments(response.data);\n// For now, use mock data\nsetTimeout(()=>{setAppointments(mockAppointments);setLoading(false);},1000);}catch(err){setError(err.message||'Failed to fetch appointments');setLoading(false);}};const bookAppointment=async appointmentData=>{try{setLoading(true);// In production:\n// const response = await api.post('/appointments', appointmentData);\n// const newAppointment = response.data;\n// Mock implementation\nconst newAppointment=_objectSpread(_objectSpread({id:Date.now()},appointmentData),{},{status:'pending',practitioner:{id:1,fullName:'Priya Sharma'}});setAppointments(prev=>[...prev,newAppointment]);setLoading(false);return newAppointment;}catch(err){setError(err.message||'Failed to book appointment');setLoading(false);throw err;}};const rescheduleAppointment=async(appointmentId,newDateTime)=>{try{setLoading(true);// In production:\n// const response = await api.put(`/appointments/${appointmentId}/reschedule`, {\n//   scheduledDate: newDateTime.date,\n//   scheduledTime: newDateTime.time\n// });\n// Mock implementation\nsetAppointments(prev=>prev.map(apt=>apt.id===appointmentId?_objectSpread(_objectSpread({},apt),{},{scheduledDate:(newDateTime===null||newDateTime===void 0?void 0:newDateTime.date)||apt.scheduledDate,scheduledTime:(newDateTime===null||newDateTime===void 0?void 0:newDateTime.time)||apt.scheduledTime,status:'pending'}):apt));setLoading(false);}catch(err){setError(err.message||'Failed to reschedule appointment');setLoading(false);throw err;}};const cancelAppointment=async appointmentId=>{try{setLoading(true);// In production:\n// await api.put(`/appointments/${appointmentId}/cancel`);\n// Mock implementation\nsetAppointments(prev=>prev.map(apt=>apt.id===appointmentId?_objectSpread(_objectSpread({},apt),{},{status:'cancelled'}):apt));setLoading(false);}catch(err){setError(err.message||'Failed to cancel appointment');setLoading(false);throw err;}};const getUpcomingAppointments=function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;const now=new Date();return appointments.filter(apt=>new Date(apt.scheduledDate)>=now&&apt.status!=='cancelled').sort((a,b)=>new Date(a.scheduledDate)-new Date(b.scheduledDate)).slice(0,limit);};const getAppointmentsByDateRange=(startDate,endDate)=>{return appointments.filter(apt=>{const aptDate=new Date(apt.scheduledDate);return aptDate>=startDate&&aptDate<=endDate;});};const getTodaysAppointments=()=>{const today=new Date().toISOString().split('T')[0];return appointments.filter(apt=>apt.scheduledDate===today&&apt.status!=='cancelled');};useEffect(()=>{if(user){fetchAppointments();}},[user]);return{appointments,loading,error,bookAppointment,rescheduleAppointment,cancelAppointment,getUpcomingAppointments,getAppointmentsByDateRange,getTodaysAppointments,refetch:fetchAppointments};};","map":{"version":3,"names":["useState","useEffect","useAuth","useAppointments","appointments","setAppointments","loading","setLoading","error","setError","user","mockAppointments","id","scheduledDate","scheduledTime","duration","treatmentType","status","practitioner","fullName","location","notes","isVirtual","preparationInstructions","fetchAppointments","setTimeout","err","message","bookAppointment","appointmentData","newAppointment","_objectSpread","Date","now","prev","rescheduleAppointment","appointmentId","newDateTime","map","apt","date","time","cancelAppointment","getUpcomingAppointments","limit","arguments","length","undefined","filter","sort","a","b","slice","getAppointmentsByDateRange","startDate","endDate","aptDate","getTodaysAppointments","today","toISOString","split","refetch"],"sources":["C:/Users/Utkarsh/OneDrive/Desktop/AYURSUTRA DRAFT/ayursutra/frontend/src/hooks/useAppointments.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport const useAppointments = () => {\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const { user } = useAuth();\n\n  // Mock data for development\n  const mockAppointments = [\n    {\n      id: 1,\n      scheduledDate: '2024-01-15',\n      scheduledTime: '10:00:00',\n      duration: 60,\n      treatmentType: 'abhyanga',\n      status: 'confirmed',\n      practitioner: {\n        id: 1,\n        fullName: 'Priya Sharma'\n      },\n      location: 'Room 101',\n      notes: 'Please arrive 15 minutes early for preparation',\n      isVirtual: false,\n      preparationInstructions: [\n        'Avoid heavy meals 2 hours before treatment',\n        'Wear comfortable, loose clothing',\n        'Bring a change of clothes'\n      ]\n    },\n    {\n      id: 2,\n      scheduledDate: '2024-01-17',\n      scheduledTime: '14:30:00',\n      duration: 90,\n      treatmentType: 'shirodhara',\n      status: 'confirmed',\n      practitioner: {\n        id: 2,\n        fullName: 'Rajesh Kumar'\n      },\n      location: 'Room 203',\n      notes: 'Stress relief session',\n      isVirtual: false,\n      preparationInstructions: [\n        'Avoid caffeine 4 hours before treatment',\n        'Come with clean, dry hair',\n        'Remove all jewelry and accessories'\n      ]\n    },\n    {\n      id: 3,\n      scheduledDate: '2024-01-20',\n      scheduledTime: '09:00:00',\n      duration: 45,\n      treatmentType: 'consultation',\n      status: 'pending',\n      practitioner: {\n        id: 1,\n        fullName: 'Priya Sharma'\n      },\n      location: 'Virtual',\n      notes: 'Progress review and treatment plan adjustment',\n      isVirtual: true,\n      preparationInstructions: [\n        'Prepare list of any concerns or questions',\n        'Have your treatment journal ready',\n        'Ensure stable internet connection'\n      ]\n    }\n  ];\n\n  const fetchAppointments = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // In production, this would be an actual API call\n      // const response = await api.get('/appointments');\n      // setAppointments(response.data);\n      \n      // For now, use mock data\n      setTimeout(() => {\n        setAppointments(mockAppointments);\n        setLoading(false);\n      }, 1000);\n      \n    } catch (err) {\n      setError(err.message || 'Failed to fetch appointments');\n      setLoading(false);\n    }\n  };\n\n  const bookAppointment = async (appointmentData) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // const response = await api.post('/appointments', appointmentData);\n      // const newAppointment = response.data;\n      \n      // Mock implementation\n      const newAppointment = {\n        id: Date.now(),\n        ...appointmentData,\n        status: 'pending',\n        practitioner: {\n          id: 1,\n          fullName: 'Priya Sharma'\n        }\n      };\n      \n      setAppointments(prev => [...prev, newAppointment]);\n      setLoading(false);\n      \n      return newAppointment;\n    } catch (err) {\n      setError(err.message || 'Failed to book appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const rescheduleAppointment = async (appointmentId, newDateTime) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // const response = await api.put(`/appointments/${appointmentId}/reschedule`, {\n      //   scheduledDate: newDateTime.date,\n      //   scheduledTime: newDateTime.time\n      // });\n      \n      // Mock implementation\n      setAppointments(prev => \n        prev.map(apt => \n          apt.id === appointmentId \n            ? { \n                ...apt, \n                scheduledDate: newDateTime?.date || apt.scheduledDate,\n                scheduledTime: newDateTime?.time || apt.scheduledTime,\n                status: 'pending'\n              }\n            : apt\n        )\n      );\n      \n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to reschedule appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const cancelAppointment = async (appointmentId) => {\n    try {\n      setLoading(true);\n      \n      // In production:\n      // await api.put(`/appointments/${appointmentId}/cancel`);\n      \n      // Mock implementation\n      setAppointments(prev => \n        prev.map(apt => \n          apt.id === appointmentId \n            ? { ...apt, status: 'cancelled' }\n            : apt\n        )\n      );\n      \n      setLoading(false);\n    } catch (err) {\n      setError(err.message || 'Failed to cancel appointment');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const getUpcomingAppointments = (limit = 5) => {\n    const now = new Date();\n    return appointments\n      .filter(apt => new Date(apt.scheduledDate) >= now && apt.status !== 'cancelled')\n      .sort((a, b) => new Date(a.scheduledDate) - new Date(b.scheduledDate))\n      .slice(0, limit);\n  };\n\n  const getAppointmentsByDateRange = (startDate, endDate) => {\n    return appointments.filter(apt => {\n      const aptDate = new Date(apt.scheduledDate);\n      return aptDate >= startDate && aptDate <= endDate;\n    });\n  };\n\n  const getTodaysAppointments = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return appointments.filter(apt => \n      apt.scheduledDate === today && apt.status !== 'cancelled'\n    );\n  };\n\n  useEffect(() => {\n    if (user) {\n      fetchAppointments();\n    }\n  }, [user]);\n\n  return {\n    appointments,\n    loading,\n    error,\n    bookAppointment,\n    rescheduleAppointment,\n    cancelAppointment,\n    getUpcomingAppointments,\n    getAppointmentsByDateRange,\n    getTodaysAppointments,\n    refetch: fetchAppointments\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}