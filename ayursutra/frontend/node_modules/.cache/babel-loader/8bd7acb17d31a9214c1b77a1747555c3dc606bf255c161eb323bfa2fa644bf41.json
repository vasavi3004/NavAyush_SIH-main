{"ast":null,"code":"import axios from'axios';// Create axios instance with base configuration\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:5000/api',timeout:10000,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle token refresh\napi.interceptors.response.use(response=>{return response;},async error=>{var _error$response;const originalRequest=error.config;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401&&!originalRequest._retry){originalRequest._retry=true;try{const refreshToken=localStorage.getItem('refreshToken');if(refreshToken){const response=await axios.post(\"\".concat(process.env.REACT_APP_API_URL||'http://localhost:5000/api',\"/auth/refresh\"),{refreshToken});const{accessToken}=response.data;localStorage.setItem('accessToken',accessToken);// Retry the original request with new token\noriginalRequest.headers.Authorization=\"Bearer \".concat(accessToken);return api(originalRequest);}}catch(refreshError){// Refresh failed, redirect to login\nlocalStorage.removeItem('authToken');localStorage.removeItem('authUser');window.location.href='/login';return Promise.reject(refreshError);}}return Promise.reject(error);});// API methods\nexport const authAPI={login:credentials=>api.post('/auth/login',credentials),register:userData=>api.post('/auth/register',userData),logout:()=>api.post('/auth/logout'),refreshToken:refreshToken=>api.post('/auth/refresh',{refreshToken}),getCurrentUser:()=>api.get('/auth/me'),forgotPassword:email=>api.post('/auth/forgot-password',{email}),resetPassword:(token,password)=>api.post('/auth/reset-password',{token,password})};export const appointmentAPI={getAll:()=>api.get('/appointments'),getById:id=>api.get(\"/appointments/\".concat(id)),create:appointmentData=>api.post('/appointments',appointmentData),update:(id,appointmentData)=>api.put(\"/appointments/\".concat(id),appointmentData),cancel:id=>api.put(\"/appointments/\".concat(id,\"/cancel\")),reschedule:(id,newDateTime)=>api.put(\"/appointments/\".concat(id,\"/reschedule\"),newDateTime),getAvailableSlots:(practitionerId,date)=>api.get(\"/appointments/available-slots?practitionerId=\".concat(practitionerId,\"&date=\").concat(date))};export const patientAPI={getProfile:()=>api.get('/patient/profile'),updateProfile:profileData=>api.put('/patient/profile',profileData),getProgress:()=>api.get('/patient/progress'),updateProgress:progressData=>api.post('/patient/progress',progressData),getTreatmentPlan:()=>api.get('/patient/treatment-plan'),getMedicalHistory:()=>api.get('/patient/medical-history')};export const practitionerAPI={getAll:()=>api.get('/practitioners'),getById:id=>api.get(\"/practitioners/\".concat(id)),getAvailability:(id,date)=>api.get(\"/practitioners/\".concat(id,\"/availability?date=\").concat(date)),getSpecializations:()=>api.get('/practitioners/specializations')};export const treatmentAPI={getAll:()=>api.get('/treatments'),getById:id=>api.get(\"/treatments/\".concat(id)),getByType:type=>api.get(\"/treatments?type=\".concat(type)),getProtocols:()=>api.get('/treatments/protocols')};export const notificationAPI={getAll:()=>api.get('/notifications'),markAsRead:id=>api.put(\"/notifications/\".concat(id,\"/read\")),markAllAsRead:()=>api.put('/notifications/mark-all-read'),delete:id=>api.delete(\"/notifications/\".concat(id)),getUnreadCount:()=>api.get('/notifications/unread-count')};export const aiSchedulingAPI={scheduleAppointment:appointmentRequest=>api.post('/ai-scheduling/schedule',appointmentRequest),getOptimalSlots:params=>api.get('/ai-scheduling/optimal-slots',{params}),rescheduleAppointment:(appointmentId,preferences)=>api.put(\"/ai-scheduling/reschedule/\".concat(appointmentId),preferences),getInsights:(practitionerId,dateRange)=>api.get(\"/ai-scheduling/insights/\".concat(practitionerId),{params:dateRange})};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","accessToken","data","setItem","refreshError","removeItem","window","location","href","authAPI","login","credentials","register","userData","logout","getCurrentUser","get","forgotPassword","email","resetPassword","password","appointmentAPI","getAll","getById","id","appointmentData","update","put","cancel","reschedule","newDateTime","getAvailableSlots","practitionerId","date","patientAPI","getProfile","updateProfile","profileData","getProgress","updateProgress","progressData","getTreatmentPlan","getMedicalHistory","practitionerAPI","getAvailability","getSpecializations","treatmentAPI","getByType","type","getProtocols","notificationAPI","markAsRead","markAllAsRead","delete","getUnreadCount","aiSchedulingAPI","scheduleAppointment","appointmentRequest","getOptimalSlots","params","rescheduleAppointment","appointmentId","preferences","getInsights","dateRange"],"sources":["C:/Users/Utkarsh/OneDrive/Desktop/AYURSUTRA DRAFT/ayursutra/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (refreshToken) {\n          const response = await axios.post(\n            `${process.env.REACT_APP_API_URL || 'http://localhost:5000/api'}/auth/refresh`,\n            { refreshToken }\n          );\n\n          const { accessToken } = response.data;\n          localStorage.setItem('accessToken', accessToken);\n\n          // Retry the original request with new token\n          originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh failed, redirect to login\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('authUser');\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// API methods\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  logout: () => api.post('/auth/logout'),\n  refreshToken: (refreshToken) => api.post('/auth/refresh', { refreshToken }),\n  getCurrentUser: () => api.get('/auth/me'),\n  forgotPassword: (email) => api.post('/auth/forgot-password', { email }),\n  resetPassword: (token, password) => api.post('/auth/reset-password', { token, password }),\n};\n\nexport const appointmentAPI = {\n  getAll: () => api.get('/appointments'),\n  getById: (id) => api.get(`/appointments/${id}`),\n  create: (appointmentData) => api.post('/appointments', appointmentData),\n  update: (id, appointmentData) => api.put(`/appointments/${id}`, appointmentData),\n  cancel: (id) => api.put(`/appointments/${id}/cancel`),\n  reschedule: (id, newDateTime) => api.put(`/appointments/${id}/reschedule`, newDateTime),\n  getAvailableSlots: (practitionerId, date) => api.get(`/appointments/available-slots?practitionerId=${practitionerId}&date=${date}`),\n};\n\nexport const patientAPI = {\n  getProfile: () => api.get('/patient/profile'),\n  updateProfile: (profileData) => api.put('/patient/profile', profileData),\n  getProgress: () => api.get('/patient/progress'),\n  updateProgress: (progressData) => api.post('/patient/progress', progressData),\n  getTreatmentPlan: () => api.get('/patient/treatment-plan'),\n  getMedicalHistory: () => api.get('/patient/medical-history'),\n};\n\nexport const practitionerAPI = {\n  getAll: () => api.get('/practitioners'),\n  getById: (id) => api.get(`/practitioners/${id}`),\n  getAvailability: (id, date) => api.get(`/practitioners/${id}/availability?date=${date}`),\n  getSpecializations: () => api.get('/practitioners/specializations'),\n};\n\nexport const treatmentAPI = {\n  getAll: () => api.get('/treatments'),\n  getById: (id) => api.get(`/treatments/${id}`),\n  getByType: (type) => api.get(`/treatments?type=${type}`),\n  getProtocols: () => api.get('/treatments/protocols'),\n};\n\nexport const notificationAPI = {\n  getAll: () => api.get('/notifications'),\n  markAsRead: (id) => api.put(`/notifications/${id}/read`),\n  markAllAsRead: () => api.put('/notifications/mark-all-read'),\n  delete: (id) => api.delete(`/notifications/${id}`),\n  getUnreadCount: () => api.get('/notifications/unread-count'),\n};\n\nexport const aiSchedulingAPI = {\n  scheduleAppointment: (appointmentRequest) => api.post('/ai-scheduling/schedule', appointmentRequest),\n  getOptimalSlots: (params) => api.get('/ai-scheduling/optimal-slots', { params }),\n  rescheduleAppointment: (appointmentId, preferences) => api.put(`/ai-scheduling/reschedule/${appointmentId}`, preferences),\n  getInsights: (practitionerId, dateRange) => api.get(`/ai-scheduling/insights/${practitionerId}`, { params: dateRange }),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}